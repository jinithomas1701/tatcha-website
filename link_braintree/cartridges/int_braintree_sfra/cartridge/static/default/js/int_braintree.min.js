/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./cartridges/int_braintree_sfra/cartridge/client/default/js/int_braintree.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/components/scrollAnimate.js":
/*!***********************************************************************************************************************************!*\
  !*** ../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/components/scrollAnimate.js ***!
  \***********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (element) {
  var position = element && element.length ? element.offset().top : 0;
  $('html, body').animate({
    scrollTop: position
  }, 500);

  if (!element) {
    $('.logo-home').focus();
  }
};

/***/ }),

/***/ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/applepay/applepayHelper.js":
/*!********************************************************************************************************!*\
  !*** ./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/applepay/applepayHelper.js ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var applePay = __webpack_require__(/*! ../braintreeApplepay */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeApplepay.js");

var _require = __webpack_require__(/*! ./../helper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/helper.js"),
    isValidInputField = _require.isValidInputField,
    removeActiveSessionPayment = _require.removeActiveSessionPayment,
    createPaymentFormData = _require.createPaymentFormData,
    showCartErrorMsg = _require.showCartErrorMsg,
    updateBillingFormValues = _require.updateBillingFormValues;

var $applePayButton = document.querySelector('.js_braintree_applepay_button');
var $applepayButtonsWrap = document.querySelector('.js_braintree_applepayButtonsWrap');
var $applepayDataMethod = document.querySelector('.payment-options[role=tablist] .nav-item[data-method-id="ApplePay"]');
var $emailField = document.querySelector('.contact-info-block [name=dwfrm_billing_contactInfoFields_email]');
var $phoneField = document.querySelector('.contact-info-block [name=dwfrm_billing_contactInfoFields_phone]');

function makeApplePayButtonDisabled() {
  $applePayButton.classList.add('js_braintree_applepay_button_disabled');
}

function hideApplePayButton() {
  $applepayButtonsWrap.style.display = 'none'; // Remove the ApplePay select payment method radiobutton

  if ($applepayDataMethod) {
    $applepayDataMethod.style.display = 'none';
  }
}

function showApplePayButton() {
  $applepayButtonsWrap.style.display = 'block'; // Show the ApplePay select payment method radiobutton

  if ($applepayDataMethod) {
    $applepayDataMethod.style.display = 'block';
  }
}

function initApplepayButton() {
  document.querySelectorAll('.js_braintree_applepay_button').forEach(function (el) {
    var $btn = el;

    if (JSON.parse($btn.getAttribute('data-is-inited'))) {
      return;
    }

    var config = JSON.parse($btn.getAttribute('data-braintree-config'));

    if (_typeof(config) !== 'object' || config === null) {
      // eslint-disable-next-line no-console
      console.error(el, 'not valid data-braintree-config');
      return;
    }

    $btn.addEventListener('braintree:deviceNotSupportApplePay', function () {
      hideApplePayButton();
    }, false);
    $btn.addEventListener('braintree:deviceSupportApplePay', function () {
      showApplePayButton();
    }, false);
    $btn.addEventListener('braintree:ApplePayCanNotMakePaymentWithActiveCard', function () {
      makeApplePayButtonDisabled();
    }, false);
    config.isRequiredBillingContactFields = true;
    config.isRequiredShippingContactFields = true;
    var applePayIns = applePay.init(config, $btn);
    $btn.addEventListener('click', function () {
      applePayIns.startPayment();
    });

    function updateCartApplepayAmount() {
      if (!applePayIns) {
        return;
      }

      applePayIns.loader.show();
      $.ajax({
        url: config.getOrderInfoUrl,
        type: 'get',
        dataType: 'json',
        success: function success(data) {
          applePayIns.loader.hide();
          applePayIns.updateAmount(data.amount);
        },
        error: function error() {
          window.location.reload();
        }
      });
      return;
    }

    $('body').on('braintree:updateCartTotals', updateCartApplepayAmount);
    $btn.addEventListener('braintree:ApplePayPaymentAuthorized', function (e) {
      applePayIns.loader.show();
      var responseData = e.detail.data;
      var billingAddressData = responseData.billingAddress;
      var paymentMethodName = JSON.parse($applePayButton.getAttribute('data-braintree-config')).paymentMethodName;
      var $braintreeCartButtons = document.querySelector('.braintree-cart-buttons-wrap');
      var placeOrderUrl = $braintreeCartButtons.getAttribute('data-checkout-placeorder-url');
      var checkoutFromCartUrl = $braintreeCartButtons.getAttribute('data-checkout-from-cart-url');
      var checkoutFormFields = $braintreeCartButtons.getAttribute('data-checkout-form-fields');
      var applePayCheckoutFormData = createPaymentFormData(checkoutFormFields, {
        firstName: billingAddressData.firstName,
        lastName: billingAddressData.lastName,
        address1: billingAddressData.streetAddress,
        address2: billingAddressData.extendedAddress || '',
        city: billingAddressData.locality,
        postalCode: billingAddressData.postalCode,
        stateCode: billingAddressData.state,
        country: billingAddressData.countryCodeAlpha2,
        email: billingAddressData.email,
        phone: billingAddressData.phone,
        paymentMethod: paymentMethodName
      });
      var csrfToken = document.querySelector('.braintree-cart-buttons-wrap  #csrf_token');
      applePayCheckoutFormData.append(csrfToken.name, csrfToken.value);
      applePayCheckoutFormData.append('braintreeApplePayNonce', responseData.nonce);
      applePayCheckoutFormData.append('braintreeApplePayDeviceDataInput', responseData.deviceData);
      applePayCheckoutFormData.append('braintreeApplePayShippingAddress', JSON.stringify(responseData.shippingAddress) || '{}');
      $.ajax({
        type: 'POST',
        url: checkoutFromCartUrl,
        data: applePayCheckoutFormData,
        contentType: false,
        processData: false,
        success: function success(data) {
          if (data.error) {
            var errorMessage = '';

            if (data.fieldErrors.length) {
              data.fieldErrors.forEach(function (error, index) {
                var keys = Object.keys(error);

                if (keys.length) {
                  errorMessage += "".concat(keys[index].replace('dwfrm_billing_', '').replace('_', ' '), " ").concat(data.fieldErrors[index][keys[index]], ". ");
                }
              });
              showCartErrorMsg(errorMessage);
            }

            if (data.serverErrors.length) {
              data.serverErrors.forEach(function (error) {
                errorMessage += "".concat(error, ". ");
              });
              showCartErrorMsg(errorMessage);
            }

            if (data.cartError) {
              window.location.href = data.redirectUrl;
            }

            return;
          }

          window.location.href = placeOrderUrl;
        },
        error: function error(err) {
          if (err && err.redirectUrl) {
            window.location.href = err.redirectUrl;
          }
        }
      });
    }, false);
    $btn.setAttribute('data-is-inited', true);
  });
}

function applepayPayment(continueButton) {
  var config = JSON.parse($applePayButton.getAttribute('data-braintree-config'));

  if (_typeof(config) !== 'object' || config === null) {
    // eslint-disable-next-line no-console
    console.error($applePayButton, 'not valid data-braintree-config');
  }

  var applepayButton = $('.js_braintree_applepay_button');
  applepayButton.on('braintree:deviceNotSupportApplePay', function () {
    hideApplePayButton();
  });
  applepayButton.on('braintree:deviceSupportApplePay', function () {
    showApplePayButton();
  });
  applepayButton.on('braintree:ApplePayCanNotMakePaymentWithActiveCard', function () {
    makeApplePayButtonDisabled();
  });
  config.isRequiredBillingContactFields = true;
  var applePayIns = applePay.init(config, $applePayButton);

  function authorizedApplePayPayment(e) {
    removeActiveSessionPayment();
    applePayIns.loader.show();
    document.querySelector('#braintreeApplePayNonce').value = e.detail.data.nonce; // Updating Storefront Billing Form data with ApplePay Billing

    var applePayBillingData = e.detail.data.billingAddress;
    var storeFrontBillingData = JSON.parse(document.querySelector('.braintree-billing-payment-wrap').getAttribute('data-billing-form-fields-names'));
    storeFrontBillingData.dwfrm_billing_addressFields_firstName = applePayBillingData.firstName;
    storeFrontBillingData.dwfrm_billing_addressFields_lastName = applePayBillingData.lastName;
    storeFrontBillingData.dwfrm_billing_addressFields_address1 = applePayBillingData.streetAddress;
    storeFrontBillingData.dwfrm_billing_addressFields_address2 = applePayBillingData.extendedAddress || '';
    storeFrontBillingData.dwfrm_billing_addressFields_city = applePayBillingData.locality;
    storeFrontBillingData.dwfrm_billing_addressFields_postalCode = applePayBillingData.postalCode;
    storeFrontBillingData.dwfrm_billing_addressFields_states_stateCode = applePayBillingData.state;
    storeFrontBillingData.dwfrm_billing_addressFields_country = applePayBillingData.countryCodeAlpha2;
    storeFrontBillingData.dwfrm_billing_contactInfoFields_email = applePayBillingData.email;
    storeFrontBillingData.dwfrm_billing_contactInfoFields_phone = applePayBillingData.phone;
    updateBillingFormValues(storeFrontBillingData);
    continueButton.click();
  }

  if (!applePayIns) return;
  $applePayButton.addEventListener('click', function () {
    if (isValidInputField($emailField) && isValidInputField($phoneField)) {
      return applePayIns.startPayment();
    }
  });
  applepayButton.on('braintree:ApplePayPaymentAuthorized', authorizedApplePayPayment);

  function appleUpdateAmountData() {
    // eslint-disable-line no-inner-declarations
    applePayIns.loader.show();
    $.ajax({
      url: config.getOrderInfoUrl,
      type: 'get',
      dataType: 'json',
      success: function success(data) {
        applePayIns.loader.hide();
        applePayIns.updateAmount(data.amount);
      },
      error: function error() {
        window.location.reload();
      }
    });
  }

  $('body').on('checkout:updateCheckoutView', appleUpdateAmountData);
  appleUpdateAmountData();
}
/*
    Remove method was used and change appearance of applepay tab
**/


function removeSessionNonce() {
  document.querySelector('#braintreeApplePayNonce').value = '';
  document.querySelector('#braintreeApplePayDeviceData').value = '';
}

module.exports = {
  initApplepayButton: initApplepayButton,
  applepayPayment: applepayPayment,
  removeSessionNonce: removeSessionNonce
};

/***/ }),

/***/ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeApplepay.js":
/*!**************************************************************************************************!*\
  !*** ./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeApplepay.js ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var braintreeUtils = __webpack_require__(/*! ./braintreeUtils */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeUtils.js");

var loaderInstance = __webpack_require__(/*! ./loaderHelper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/loaderHelper.js");
/* global braintreeUtils braintree $ ApplePaySession */


var bu = braintreeUtils;
var loader;

function Constructor(initParams, $btn) {
  this.$btn = $btn;
  var $errorContainer = document.createElement('div');
  $errorContainer.className = 'error';
  var $loaderContainter = document.querySelector('.braintreeApplePayLoader');
  loader = loaderInstance($loaderContainter);
  this.loader = loader;
  $btn.parentNode.insertBefore($errorContainer, $btn.nextSibling);
  this.params = initParams;
  this.er = bu.createErrorInstance($errorContainer);
}

Constructor.prototype.createApplePay = function () {
  var that = this;
  var params = that.params;
  this.$braintreeApplePayDeviceDataInput = document.querySelector('input[name=braintreeApplePayDeviceDataInput]');
  loader.show();
  braintree.client.create({
    authorization: bu.clientToken
  }, function (clientErr, clientInstance) {
    if (clientErr) {
      that.er.show(clientErr);
      return;
    }

    if (params.isFraudToolsEnabled) {
      braintree.dataCollector.create({
        client: clientInstance,
        paypal: true
      }, function (dataCollectorErr, dataCollectorInstance) {
        if (dataCollectorErr) {
          that.er.show(dataCollectorErr);
          return;
        }

        if (that.$braintreeApplePayDeviceDataInput) {
          that.$braintreeApplePayDeviceDataInput.value = dataCollectorInstance.deviceData;
        }

        that.loader.hide();
      });
    }

    braintree.applePay.create({
      client: clientInstance
    }, function (error, applePayInstance) {
      loader.hide();

      if (error) {
        that.er.show(error);
        return;
      }

      that.createApplePaySession = function () {
        var paymentRequest = applePayInstance.createPaymentRequest({
          total: {
            label: params.options.displayName,
            amount: params.options.amount
          }
        });

        if (params.isRequiredBillingContactFields) {
          paymentRequest.requiredBillingContactFields = ['postalAddress', 'name'];
        }

        if (params.isRequiredShippingContactFields) {
          paymentRequest.requiredShippingContactFields = ['postalAddress', 'name', 'phone', 'email'];
        }

        var session = new ApplePaySession(1, paymentRequest);

        session.onvalidatemerchant = function (event) {
          loader.show();
          applePayInstance.performValidation({
            validationURL: event.validationURL,
            displayName: params.options.displayName
          }, function (eventError, merchantSession) {
            loader.hide();

            if (eventError) {
              that.er.show(eventError);
              session.abort();
              return;
            }

            session.completeMerchantValidation(merchantSession);
          });
        };

        session.onpaymentauthorized = function (event) {
          loader.show();
          applePayInstance.tokenize({
            token: event.payment.token
          }, function (eventError, payload) {
            loader.hide();

            if (eventError) {
              that.er.show(eventError);
              session.completePayment(ApplePaySession.STATUS_FAILURE);
              return;
            }

            session.completePayment(ApplePaySession.STATUS_SUCCESS);
            var data = {
              event: event,
              payload: payload,
              nonce: payload.nonce,
              deviceData: document.querySelector('input[name=braintreeApplePayDeviceDataInput]').value
            };
            var shippingContact = event.payment.shippingContact;

            if (shippingContact) {
              data.shippingAddress = {
                streetAddress: shippingContact.addressLines[0],
                extendedAddress: shippingContact.addressLines[1],
                locality: shippingContact.locality,
                region: shippingContact.administrativeArea.toUpperCase(),
                postalCode: shippingContact.postalCode,
                countryCodeAlpha2: shippingContact.countryCode.toUpperCase(),
                firstName: shippingContact.givenName,
                lastName: shippingContact.familyName,
                phone: shippingContact.phoneNumber,
                email: shippingContact.emailAddress
              };
            } else {
              shippingContact = {
                emailAddress: document.querySelector('.contact-info-block [name=dwfrm_billing_contactInfoFields_email]').value,
                phoneNumber: document.querySelector('.contact-info-block [name=dwfrm_billing_contactInfoFields_phone]').value
              };
            }

            var billingContact = event.payment.billingContact;

            if (billingContact) {
              data.billingAddress = {
                streetAddress: billingContact.addressLines[0],
                extendedAddress: billingContact.addressLines[1],
                locality: billingContact.locality,
                region: billingContact.administrativeArea.toUpperCase(),
                postalCode: billingContact.postalCode,
                countryCodeAlpha2: billingContact.countryCode.toUpperCase(),
                firstName: billingContact.givenName,
                lastName: billingContact.familyName,
                email: shippingContact.emailAddress,
                phone: shippingContact.phoneNumber
              };
            }

            that.$btn.dispatchEvent(new CustomEvent('braintree:ApplePayPaymentAuthorized', {
              detail: {
                data: data
              }
            }));
          });
        };

        session.begin();
      };

      var promise = ApplePaySession.canMakePaymentsWithActiveCard(applePayInstance.merchantIdentifier);
      promise.then(function (canMakePaymentsWithActiveCard) {
        if (!canMakePaymentsWithActiveCard) {
          that.$btn.dispatchEvent(new CustomEvent('braintree:ApplePayCanNotMakePaymentWithActiveCard'));
          that.createApplePaySession = null;
          return;
        }
      });
    });
  });
};

Constructor.prototype.startPayment = function () {
  this.er.hide();

  if (this.createApplePaySession) {
    this.createApplePaySession();
  }
};

Constructor.prototype.updateAmount = function (amount) {
  this.params.options.amount = amount;
};

module.exports = {
  init: function init(params, $btn) {
    if (!window.ApplePaySession) {
      $btn.dispatchEvent(new CustomEvent('braintree:deviceNotSupportApplePay'));
      return false;
    }

    $btn.dispatchEvent(new CustomEvent('braintree:deviceSupportApplePay'));
    var ins = new Constructor(params, $btn);
    bu.clientToken = params.clientToken;
    $.extend(bu.messages, params.messages);
    ins.createApplePay();
    return ins;
  }
};

/***/ }),

/***/ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeCreditCard.js":
/*!****************************************************************************************************!*\
  !*** ./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeCreditCard.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable block-scoped-var */


var braintreeUtils = __webpack_require__(/*! ./braintreeUtils */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeUtils.js");

var loaderInstance = __webpack_require__(/*! ./loaderHelper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/loaderHelper.js");

var creditcardHelper = __webpack_require__(/*! ./creditcard/creditcardHelper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/creditcard/creditcardHelper.js");
/* global braintreeUtils braintree $ */


var bu = braintreeUtils;
var er = null;
var loader;
var params;

function createHostedFields() {
  if (params.isFraudToolsEnabled) {
    loader.show();
    braintree.dataCollector.create({
      authorization: bu.clientToken,
      kount: true,
      paypal: false
    }, function (error, data) {
      loader.hide();

      if (error) {
        return;
      }

      document.querySelector('#braintreeDeviceData').value = data.deviceData;
    });
  }

  loader.show();
  braintree.hostedFields.create({
    authorization: bu.clientToken,
    styles: params.hostedFieldsStyles,
    fields: params.hostedFieldsConfig
  }, function (error, hostedFieldsInstance) {
    loader.hide();

    if (error) {
      er.show(error);
      return;
    }

    params.hostedFieldsInstance = hostedFieldsInstance;
    hostedFieldsInstance.on('validityChange', function () {
      if (params.continueButton && JSON.parse(params.continueButton.getAttribute('data-is-allow-submit-form'))) {
        params.continueButton.setAttribute('data-is-allow-submit-form', false);
      }
    });
  });
}

function isFormValid() {
  if (params.data && params.data.amount === 0) {
    er.show('Order total 0 is not allowed for Credit Card');
    return false;
  }

  var $cardOwnerEl = document.querySelector('#braintreeCardOwner');

  if ($cardOwnerEl.value.length === 0) {
    $cardOwnerEl.parentNode.classList.add('braintree-hosted-fields-invalid');
    er.show(params.messages.validation);
    return false;
  }

  $cardOwnerEl.parentNode.classList.remove('braintree-hosted-fields-invalid');
  er.hide();
  return true;
}

function clearHostedFields() {
  params.hostedFieldsInstance.clear('number');
  params.hostedFieldsInstance.clear('cvv');
  params.hostedFieldsInstance.clear('expirationDate');
}

function check3dSecureAndSubmit(response, startTokenizeCb) {
  if (!response.nonce || response.nonce === 'null') {
    document.querySelector('#braintreeCreditCardNonce').value = 'null';
    startTokenizeCb({
      error: true,
      errorCode: 'nonce_is_null'
    });
    return;
  }

  if (!params.is3dSecureEnabled) {
    document.querySelector('#braintreeCreditCardNonce').value = response.nonce;
    startTokenizeCb({
      error: false,
      errorCode: 'ok'
    });
    return;
  }

  loader.show();

  var billingData = __webpack_require__(/*! ./helper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/helper.js").getBillingAddressFormValues();

  braintree.threeDSecure.create({
    authorization: bu.clientToken,
    version: 2
  }, function (error, threeDSecure) {
    loader.hide();

    if (error) {
      er.show(error);
      startTokenizeCb({
        error: true,
        errorCode: 'bt_3dsecure_create_error',
        btError: error
      });
      return;
    }

    bu.threeDSecure = threeDSecure;
    loader.show();
    threeDSecure.verifyCard({
      amount: params.data.amount,
      nonce: response.nonce,
      bin: response.details ? response.details.bin : '',
      email: document.querySelector('#email').value,
      billingAddress: {
        givenName: billingData.firstName,
        surname: billingData.lastName,
        phoneNumber: billingData.phone,
        streetAddress: billingData.address1,
        extendedAddress: billingData.address2,
        locality: billingData.city,
        region: billingData.stateCode,
        postalCode: billingData.postalCode,
        countryCodeAlpha2: billingData.country
      },
      additionalInformation: params.data.shippingAdditionalInfo,
      onLookupComplete: function onLookupComplete(data, next) {
        next();
      }
    }, function (err, data) {
      loader.hide();

      if (err) {
        er.show(err);
        startTokenizeCb({
          error: true,
          errorCode: 'bt_3dsecure_verify_error',
          btError: err
        });
        return;
      }

      if (data.liabilityShifted || params.isSkip3dSecureLiabilityResult) {
        document.querySelector('#braintreeIs3dSecureRequired').value = 'true';
        document.querySelector('#braintreeCreditCardNonce').value = data.nonce;
        startTokenizeCb({
          error: false,
          result: 'ok'
        });
        return;
      }

      er.show(params.messages.secure3DFailed);
      startTokenizeCb({
        error: true,
        result: 'secure3DFailed'
      });
      return;
    });
  });
}
/**
 * Creates tokenization options for 'tokenize' function.
 * @returns {Object} Object with tokenization options.
 */


function createTokenizationOptions() {
  var billingData = __webpack_require__(/*! ./helper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/helper.js").getBillingAddressFormValues();

  return {
    billingAddress: {
      firstName: billingData.firstName,
      lastName: billingData.lastName,
      streetAddress: billingData.address1.split('%20').join(' '),
      extendedAddress: billingData.address2 ? billingData.address2.split('%20').join(' ') : billingData.address2,
      locality: billingData.city.includes('%20') ? billingData.city.split('%20').join(' ') : billingData.city,
      region: billingData.stateCode,
      postalCode: billingData.postalCode,
      countryCodeAlpha2: billingData.country.includes('$20') ? billingData.country.split('%20').join(' ') : billingData.country
    }
  };
}

function startTokenize(cb, response) {
  var tokenizationOptions;

  if (response && response.nonce) {
    check3dSecureAndSubmit(response, cb);
    return;
  }

  if (!isFormValid()) {
    cb({
      error: true,
      errorCode: 'fields_not_valid'
    });
    return;
  }

  loader.show();

  if ($('#dwfrm_billing').length > 0) {
    tokenizationOptions = createTokenizationOptions();
  } else {
    tokenizationOptions = {};
  }

  params.hostedFieldsInstance.tokenize(tokenizationOptions, function (error, data) {
    loader.hide();

    if (error) {
      er.show(error);
      cb({
        error: true,
        errorCode: 'bt_tokenize_error',
        btError: error
      });
      return;
    }

    if (data.type === 'CreditCard') {
      document.querySelector('#braintreeCardType').value = creditcardHelper.convertCardTypeToDwFormat(data.details.cardType);
      document.querySelector('#braintreeCardMaskNumber').value = '************' + data.details.lastFour;
      document.querySelector('#braintreeCardExpirationMonth').value = data.details.expirationMonth;
      document.querySelector('#braintreeCardExpirationYear').value = data.details.expirationYear.substr(2);
      var creditCardFieldsCardNumber = document.querySelector('input[name=dwfrm_billing_creditCardFields_cardNumber]');

      if (creditCardFieldsCardNumber) {
        creditCardFieldsCardNumber.value = '************' + data.details.lastFour;
      }

      if (document.querySelector('.form-group.braintree_used_creditcard_account')) {
        var $cardOwner = document.querySelector('#braintreeCardOwner').getAttribute('data-new-cart-value');
        document.querySelector('#braintreeCardOwnerPh').textContent = $cardOwner;
        document.querySelector('#braintreeCardNumberPh').textContent = '************' + data.details.lastFour;
        document.querySelector('#braintreeCvvPh').textContent = '***';
        document.querySelector('#braintreeExpirationPh').textContent = data.details.expirationMonth + '/' + data.details.expirationYear.substr(2);
        var selectedCard = document.querySelector('#braintreeSessionCreditAccount');
        selectedCard.classList.remove('used-creditcard-account-hide');
        selectedCard.setAttribute('data-number', '************' + data.details.lastFour);
        selectedCard.setAttribute('data-expiration', data.details.expirationMonth + '/' + data.details.expirationYear.substr(2));
        selectedCard.setAttribute('data-type', creditcardHelper.convertCardTypeToDwFormat(data.details.cardType));
        selectedCard.setAttribute('data-owner', $cardOwner);
        selectedCard.setAttribute('data-nonce', data.nonce);
      }
    }

    check3dSecureAndSubmit(data, cb);
  });
}

function init(initParams) {
  params = initParams;
  bu.clientToken = params.clientToken;
}

function initFields(initParams, $container) {
  params = initParams;
  params.$container = $container;
  er = bu.createErrorInstance(document.querySelector('#braintreeCreditCardErrorContainer'), creditcardHelper.creditcardErrorContainer);
  loader = loaderInstance(document.querySelector('#braintreeCreditCardLoader'));
  bu.clientToken = params.clientToken;
  $.extend(bu.messages, params.messages);
  creditcardHelper.cardOwnerEvents();

  function getHostedFieldsStyles() {
    return {
      input: {
        'font-size': '12px',
        color: '#b7802a'
      },
      ':focus': {
        color: 'blue'
      },
      '.valid': {
        color: 'green'
      },
      '.invalid': {
        color: 'red'
      }
    };
  }

  function getHostedFieldsConfig() {
    return {
      number: {
        selector: '#braintreeCardNumber'
      },
      cvv: {
        selector: '#braintreeCvv'
      },
      expirationDate: {
        selector: '#braintreeExpirationDate'
      }
    };
  }

  if (!params.hostedFieldsStyles) {
    params.hostedFieldsStyles = getHostedFieldsStyles();
  }

  params.hostedFieldsConfig = getHostedFieldsConfig();
  $.extend(params.hostedFieldsConfig, params.hostedFieldsAdvancedOptions);
  createHostedFields();
}

module.exports = {
  init: init,
  initFields: initFields,
  startTokenize: startTokenize,
  isFormValid: isFormValid,
  getHostedFieldInstance: function getHostedFieldInstance() {
    return params ? params.hostedFieldsInstance : null;
  },
  updateData: function updateData(data) {
    params.data = data;
  },
  clearHostedFields: clearHostedFields
};

/***/ }),

/***/ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeGooglepay.js":
/*!***************************************************************************************************!*\
  !*** ./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeGooglepay.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var braintreeUtils = __webpack_require__(/*! ./braintreeUtils */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeUtils.js");

var loaderInstance = __webpack_require__(/*! ./loaderHelper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/loaderHelper.js");

var paypalHelper = __webpack_require__(/*! ./paypal/paypalHelper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/paypal/paypalHelper.js");

var _require = __webpack_require__(/*! ./helper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/helper.js"),
    showCartErrorMsg = _require.showCartErrorMsg;
/* global braintreeUtils braintree $ Googlepay */


var bu = braintreeUtils;
var loader;
var $googlepayCartButton = document.querySelector('.braintree-cart-google-button');
var $googlepayBillingButton = document.querySelector('.braintree-billingpage-google-button');

function Constructor(initParams, $btn) {
  this.$btn = $btn;
  var $errorContainer = document.createElement('div');
  $errorContainer.className = 'error';
  var $loaderContainter = document.querySelector('.braintreeGooglepayLoader');
  loader = loaderInstance($loaderContainter);
  this.loader = loader;
  $btn.parentNode.insertBefore($errorContainer, $btn.nextSibling);
  this.params = initParams;
  this.er = bu.createErrorInstance($errorContainer);
}

Constructor.prototype.createGooglepay = function () {
  var that = this;
  var params = that.params;
  this.$braintreeGooglePayDeviceDataInput = document.querySelector('input[name=braintreeGooglePayDeviceDataInput]');
  var paymentsClient = new google.payments.api.PaymentsClient({
    // eslint-disable-line no-undef
    environment: 'TEST' // Or 'PRODUCTION'

  });
  braintree.client.create({
    authorization: params.clientToken
  }, function (clientErr, clientInstance) {
    if (clientErr) {
      that.er.show(clientErr);
      return;
    }

    if (params.isFraudToolsEnabled) {
      braintree.dataCollector.create({
        client: clientInstance,
        paypal: true
      }, function (dataCollectorErr, dataCollectorInstance) {
        if (dataCollectorErr) {
          that.er.show(dataCollectorErr);
          return;
        }

        if (that.$braintreeGooglePayDeviceDataInput) {
          that.$braintreeGooglePayDeviceDataInput.value = dataCollectorInstance.deviceData;
        }

        that.loader.hide();
      });
    }

    braintree.googlePayment.create({
      client: clientInstance,
      googlePayVersion: 2
    }, function (googlePaymentErr, googlePaymentInstance) {
      if (googlePaymentErr) {
        that.er.show(googlePaymentErr);
        return;
      }

      var allowedPaymentMethods = googlePaymentInstance.createPaymentDataRequest().allowedPaymentMethods;
      paymentsClient.isReadyToPay({
        // see https://developers.google.com/pay/api/web/reference/object#IsReadyToPayRequest
        apiVersion: 2,
        apiVersionMinor: 0,
        allowedPaymentMethods: allowedPaymentMethods
      }).then(function (response) {
        if (response.result) {
          function onGooglePaymentButtonClicked() {
            // eslint-disable-line no-inner-declarations
            if (params.options.amount === 0 && !params.options.isAccount) {
              var zeroAmountErrorMsg = 'Order total 0 is not allowed for GooglePay';
              if ($googlepayCartButton) showCartErrorMsg(zeroAmountErrorMsg);
              if ($googlepayBillingButton) paypalHelper.showCheckoutErrorMsg(zeroAmountErrorMsg);
              return;
            }

            loader.show();
            var paymentDataRequest = googlePaymentInstance.createPaymentDataRequest({
              transactionInfo: {
                currencyCode: params.options.currency,
                totalPriceStatus: 'FINAL',
                totalPrice: String(params.options.amount)
              },
              shippingAddressRequired: params.options.isShippingAddressRequired,
              shippingAddressParameters: {
                allowedCountryCodes: ['US'],
                phoneNumberRequired: true
              },
              emailRequired: true
            });
            var cardPaymentMethod = paymentDataRequest.allowedPaymentMethods[0];
            cardPaymentMethod.parameters.billingAddressRequired = true;
            cardPaymentMethod.parameters.billingAddressParameters = {
              format: 'FULL',
              phoneNumberRequired: true
            };
            paymentsClient.loadPaymentData(paymentDataRequest).then(function (paymentData) {
              googlePaymentInstance.parseResponse(paymentData, function (err, result) {
                if (err) {
                  loader.hide(); // Handle parsing error
                }

                params.onTokenizePayment(paymentData, result);
              });
              loader.hide();
            }).catch(function (err) {
              loader.hide(); // eslint-disable-next-line no-console

              console.log(err);
            });
          }

          var button = paymentsClient.createButton({
            onClick: onGooglePaymentButtonClicked
          });
          that.$btn.appendChild(button);
          loader.hide();
        }
      }).catch(function (err) {
        loader.hide(); // eslint-disable-next-line no-console

        console.log(err);
      });
    }); // Set up other Braintree components
  });
};

Constructor.prototype.updateAmount = function (amount) {
  this.params.options.amount = amount;
};

module.exports = {
  init: function init(params, $btn) {
    bu.clientToken = params.clientToken;
    return new Constructor(params, $btn);
  }
};

/***/ }),

/***/ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeLocal.js":
/*!***********************************************************************************************!*\
  !*** ./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeLocal.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable no-use-before-define */

/* global braintreeUtils braintree $ VenmoSession */

function _readOnlyError(name) { throw new TypeError("\"" + name + "\" is read-only"); }

var braintreeUtils = __webpack_require__(/*! ./braintreeUtils */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeUtils.js");

var loaderInstance = __webpack_require__(/*! ./loaderHelper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/loaderHelper.js");

var paypalHelper = __webpack_require__(/*! ./paypal/paypalHelper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/paypal/paypalHelper.js");

var _require = __webpack_require__(/*! ./helper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/helper.js"),
    isValidInputField = _require.isValidInputField;

var scrollAnimate = __webpack_require__(/*! base/components/scrollAnimate */ "../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/components/scrollAnimate.js");

var errorText = 'An error occurred. Please try again later or choose different payment method.';
var bu = braintreeUtils;
var loader;

function Constructor(initParams, $btn) {
  this.$btn = $btn;
  var $errorContainer = document.createElement('div');
  $errorContainer.className = 'lpm-error';
  var $loaderContainter = document.querySelector('.lpmLoader');
  loader = loaderInstance($loaderContainter);
  this.loader = loader;
  $btn.parentNode.insertBefore($errorContainer, $btn.nextSibling);
  this.params = initParams;
  this.er = bu.createErrorInstance($errorContainer);
}

Constructor.prototype.createLocalPayment = function () {
  var that = this;
  var params = that.params; // Create a client.

  braintree.client.create({
    authorization: params.clientToken
  }).then(function (clientInstance) {
    // Create a local payment component.
    return braintree.localPayment.create({
      client: clientInstance
    });
  }).then(function (localPaymentInstance) {
    function createLocalPaymentClickListener(type) {
      var emailField = document.querySelector('#email');
      return function (event) {
        event.preventDefault();

        if (params.options.amount === 0) {
          paypalHelper.showCheckoutErrorMsg('Order total 0 is not allowed for ' + type);
          that.loader.hide();
          return;
        }

        if (emailField && emailField.value !== '' && !isValidInputField(emailField)) {
          that.loader.hide();
          return;
        }

        that.loader.show();
        document.querySelector('.processingMsg').style.display = 'block';
        $.getJSON(that.params.getOrderInfoUrl).then(function (_ref) {
          var shippingAddress = _ref.shippingAddress;
          var reqData = Object.assign(createRequestData(shippingAddress, that.params, type), {
            onPaymentStart: function onPaymentStart(_, start) {
              return start();
            }
          }); // Saving shippingAddress + email in a case if startPayment will return {} details object

          that.params.shippingAddress = shippingAddress;
          that.params.shippingAddress.email = emailField.value;
          localPaymentInstance.startPayment(reqData).then(function (_ref2) {
            var nonce = _ref2.nonce,
                details = _ref2.details,
                correlationId = _ref2.correlationId;
            var processingMsg = document.querySelector('.processingMsg');
            var finalProcessingMsg = document.querySelector('.finalProcessingMsg');
            processingMsg.style.display = 'none';
            finalProcessingMsg.style.display = 'block';
            return $.ajax({
              url: params.paymentConfirmUrl,
              type: 'POST',
              contentType: 'application/json',
              data: JSON.stringify({
                nonce: nonce,
                lpmName: type,
                details: jQuery.isEmptyObject(details) ? that.params.shippingAddress : details,
                deviceData: JSON.stringify({
                  correlation_id: correlationId
                })
              })
            });
          }).then(function (_ref3) {
            var redirectUrl = _ref3.redirectUrl;
            that.loader.hide();
            window.location.href = redirectUrl;
          }).catch(function (err) {
            that.loader.hide();
            $('.error-message').show();
            $('.error-message-text').text(err.message);
            scrollAnimate($('.error-message'));
          });
        }).catch(function (err) {
          if (err.responseText !== '') {
            err.responseText, _readOnlyError("errorText");
          }

          that.loader.hide();
          $('.error-message').show();
          $('.error-message-text').text(errorText);
          scrollAnimate($('.error-message'));
        });
      };
    }

    var paymentMethod = that.$btn.dataset.localPaymentMethodName;
    that.$btn.addEventListener('click', createLocalPaymentClickListener(paymentMethod));
  });
};

function createRequestData(shippingData, params, type) {
  var email = document.querySelector('#email').value;
  var recipientName = shippingData.recipientName.split(' ');
  shippingData.firstName = recipientName[0];
  shippingData.lastName = recipientName[1];
  return {
    paymentType: type,
    amount: params.options.amount,
    fallback: {
      url: params.fallbackUrl + '?lpmName=' + type + '&email=' + email,
      buttonText: 'Complete Payment'
    },
    currencyCode: params.options.currency,
    shippingAddressRequired: false,
    email: email,
    phone: shippingData && shippingData.phone,
    givenName: shippingData && shippingData.firstName,
    surname: shippingData && shippingData.lastName,
    address: {
      countryCode: shippingData && shippingData.countryCode
    }
  };
}

Constructor.prototype.updateShippingData = function () {
  var localIns = this;
  localIns.loader.show();
  return $.getJSON(localIns.params.getOrderInfoUrl);
};

Constructor.prototype.updateShippingAddress = function (data) {
  if (data) {
    var recipientName = data.recipientName.split(' ');
    data.firstName = recipientName[0];
    data.lastName = recipientName[1];
    this.shippingData = data;
  }
};

Constructor.prototype.updateAmount = function (amount) {
  this.params.options.amount = amount;
};

module.exports = {
  init: function init(params, $btn) {
    bu.clientToken = params.clientToken;
    return new Constructor(params, $btn);
  }
};

/***/ }),

/***/ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeMFRA.js":
/*!**********************************************************************************************!*\
  !*** ./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeMFRA.js ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
  /* global braintreeUtils braintree $ */
  var helper = __webpack_require__(/*! ./helper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/helper.js");

  var applepayHelper = __webpack_require__(/*! ./applepay/applepayHelper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/applepay/applepayHelper.js");

  var creditcardHelper = __webpack_require__(/*! ./creditcard/creditcardHelper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/creditcard/creditcardHelper.js");

  var creditcardPayment = __webpack_require__(/*! ./creditcard/creditcardPayment */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/creditcard/creditcardPayment.js");

  var creditCardFields = __webpack_require__(/*! ./creditcard/creditcardFields */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/creditcard/creditcardFields.js");

  var creditCardAccount = __webpack_require__(/*! ./creditcard/creditcardAccount */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/creditcard/creditcardAccount.js");

  var minicartHelper = __webpack_require__(/*! ./paypal/minicartHelper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/paypal/minicartHelper.js");

  var paypalAccount = __webpack_require__(/*! ./paypal/paypalAccount */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/paypal/paypalAccount.js");

  var paypalPayment = __webpack_require__(/*! ./paypal/paypalPayment */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/paypal/paypalPayment.js");

  var paypalSavedAccountHandler = __webpack_require__(/*! ./paypal/paypalSavedAccountHandler */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/paypal/paypalSavedAccountHandler.js");

  var local = __webpack_require__(/*! ./local/localPayment */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/local/localPayment.js"); // eslint-disable-line no-unused-vars


  var orderStage = document.getElementById('checkout-main');
  var pageState = sessionStorage.getItem('pageState');
  var $form = document.querySelector('#dwfrm_billing'); // eslint-disable-line no-unused-vars

  var $cartPage = document.querySelectorAll('.cart-page');
  var $continueButton = document.querySelector('button.submit-payment');
  var $summaryDetails = document.querySelector('.summary-details .payment-details');
  var $addCreditCardForm = document.querySelector('.js_braintree_addCreditCardForm');
  var $paypalContent = document.querySelector('.js_braintree_paypalContent');
  var $creditCardContent = document.querySelector('.js_braintree_creditCardContent');
  var $applepayContent = document.querySelector('.js_braintree_applepayContent');
  var $braintreePaypalNonce = document.querySelector('#braintreePayPalNonce');
  var $minicartPopover = document.querySelector('.minicart .popover');
  var $creditCardList = document.querySelector('#braintreeCreditCardList');
  var $staticPaypalButton = document.querySelector('.braintree-static-paypal-button');

  var venmoAccount = __webpack_require__(/*! ./venmo/venmoAccount */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/venmo/venmoAccount.js");

  var venmoPayment = __webpack_require__(/*! ./venmo/venmoPayment */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/venmo/venmoPayment.js");

  var $venmoContent = document.querySelector('.js_braintree_venmoContent');

  var googlePayAccount = __webpack_require__(/*! ./googlepay/googlepayAccount */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/googlepay/googlepayAccount.js");

  var googlepayPayment = __webpack_require__(/*! ./googlepay/googlepayPayment */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/googlepay/googlepayPayment.js");

  var $googlepayContent = document.querySelector('.js_braintree_googlepayContent');
  var $googlepayOnCart = document.querySelector('.braintree-cart-google-button');
  var $addGooglePayAccountForm = document.querySelector('.js_braintree_addGooglePayAccountForm');
  var $braintreeGooglePayNonce = document.querySelector('#braintreeGooglePayNonce');

  var braintreeSrc = __webpack_require__(/*! ./src/srcPayment */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/src/srcPayment.js");

  var srcAccount = __webpack_require__(/*! ./src/srcAccount */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/src/srcAccount.js");

  var $addSrcAccountForm = document.querySelector('.js_braintree_addSrcAccountForm');
  var $srcContent = document.querySelector('.js_braintree_srcContent');
  var $braintreeSrcNonce = document.querySelector('#braintreeSRCNonce');
  var $srcOnCart = document.querySelector('.braintree-cart-src-button');

  if (window.NodeList && !NodeList.prototype.forEach) {
    NodeList.prototype.forEach = Array.prototype.forEach;
  }

  (function () {
    if (typeof window.CustomEvent === 'function') return false; // If not IE

    function CustomEvent(event, params) {
      // eslint-disable-next-line no-param-reassign
      params = params || {
        bubbles: false,
        cancelable: false,
        detail: undefined
      };
      var evt = document.createEvent('CustomEvent');
      evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
      return evt;
    }

    CustomEvent.prototype = window.Event.prototype;
    window.CustomEvent = CustomEvent;
  })();

  if ($cartPage) {
    helper.initWathcherCartUpdate();
  }

  if ($addCreditCardForm) {
    creditCardAccount.initAccountAddCreditCard();
  }

  if ($addGooglePayAccountForm) {
    googlePayAccount.initAddGooglePayAccount();
  }

  if ($addSrcAccountForm) {
    srcAccount.initAddSrcAccount();
  }

  document.addEventListener('DOMContentLoaded', function () {
    minicartHelper.miniCartButton();
  });

  if ($minicartPopover) {
    minicartHelper.observer.observe($minicartPopover, {
      childList: true
    });
  }

  helper.paymentMethodChangeHandle(document.querySelector('.payment-options[role=tablist] a.active[data-toggle="tab"]'));

  if ($cartPage.length) {
    applepayHelper.initApplepayButton();
  }

  if ($paypalContent) {
    paypalPayment.makePaypalPayment($continueButton);
  }

  if ($creditCardContent) {
    creditCardFields.initCreditCardFields();
    creditcardHelper.initCardListAndSaveFunctionality();
    $('body').on('checkout:updateCheckoutView', creditCardFields.updateData);
    creditCardFields.updateData();

    if ($creditCardList) {
      $creditCardList.addEventListener('change', function () {
        creditcardPayment.doNotAllowSubmitForm();
      });
    }

    $('body').on('braintree:3dSecure_content_shown', function () {
      helper.continueButtonToggle(false);
    });
    $('body').on('braintree:3dSecure_content_removed', function () {
      setTimeout(function () {
        creditcardPayment.hide3DSecureContainer();
      }, 2000);
    });
    $continueButton.addEventListener('click', function (event) {
      if (!event.isTrusted) {
        return;
      }

      helper.removeActiveSessionPayment();
      creditcardPayment.makeCreditCardPayment(event);
    });
  }

  if ($applepayContent) {
    applepayHelper.applepayPayment($continueButton);
  }

  if ($venmoContent) {
    venmoPayment.makeVenmoPayment($continueButton);
  }

  if ($googlepayContent || $googlepayOnCart) {
    googlepayPayment.makeGooglepayPayment($continueButton);
  }

  if ($srcContent || $srcOnCart) {
    braintreeSrc.initSrcButton($continueButton);
  }

  $('.payment-options[role=tablist] a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
    helper.paymentMethodChangeHandle(e.target);
    var cardList = document.getElementById('braintreeCreditCardList');
    var paypalList = document.getElementById('braintreePaypalAccountsList');
    var changeEvent;

    if (e.target.hash === '#creditcard-content' && cardList) {
      if (typeof Event === 'function') {
        changeEvent = new Event('changeEvent');
        cardList.addEventListener('changeEvent', function () {
          'change';
        }, false);
      } else {
        changeEvent = document.createEvent('Event');
        changeEvent.initEvent('changeEvent', true, true);
      }

      cardList.dispatchEvent(changeEvent);
    } else if (e.target.hash === '#paypal-content' && paypalList) {
      if (typeof Event === 'function') {
        changeEvent = new Event('changeEvent');
        paypalList.addEventListener('changeEvent', function () {
          'change';
        }, false);
      } else {
        changeEvent = document.createEvent('Event');
        changeEvent.initEvent('changeEvent', true, true);
      }

      paypalList.dispatchEvent(changeEvent);
    }
  });

  if ($summaryDetails) {
    $summaryDetails.classList.add('braintree-payment-details');
    $summaryDetails.classList.remove('payment-details');
  }

  $('body').on('checkout:updateCheckoutView', helper.updateCheckoutView);

  if (pageState && pageState === 'cart' && orderStage && orderStage.getAttribute('data-checkout-stage') === 'placeOrder') {
    helper.updatePaymentMethodTab();
    sessionStorage.removeItem('pageState');
  }

  if ($braintreePaypalNonce && $braintreePaypalNonce.value !== '') {
    document.querySelector('.paypal-tab').click();
  }

  if ($braintreeGooglePayNonce && $braintreeGooglePayNonce.value !== '') {
    document.querySelector('.googlepay-tab').click();
  }

  if ($braintreeSrcNonce && $braintreeSrcNonce.value !== '') {
    document.querySelector('.src-tab').click();
  }

  if ($staticPaypalButton) {
    paypalSavedAccountHandler.paypalStaticPdpButtonHandler();
    $staticPaypalButton.addEventListener('click', paypalSavedAccountHandler.staticImageHandler);
  } // My account page


  if (document.querySelector('.add-paypal-account')) {
    paypalAccount.initPayPalEvents();
  }

  if (document.querySelector('.add-venmo-account')) {
    venmoAccount.initVenmoEvents();
  }

  if (document.querySelector('.creditCard-accounts')) {
    helper.initCardEvents();
  }

  if (document.querySelector('.paypal-accounts')) {
    paypalAccount.initPaypalButtonsEvents();
  }

  if (document.querySelector('.venmo-accounts')) {
    venmoAccount.initVenmoButtonsEvents();
  }
};

/***/ }),

/***/ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreePaypal.js":
/*!************************************************************************************************!*\
  !*** ./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreePaypal.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable no-inner-declarations */

/* eslint-disable new-cap */

/* global braintreeUtils braintree paypal $ */

var braintreeUtils = __webpack_require__(/*! ./braintreeUtils */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeUtils.js");

var loaderInstance = __webpack_require__(/*! ./loaderHelper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/loaderHelper.js");

var paypalHelper = __webpack_require__(/*! ./paypal/paypalHelper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/paypal/paypalHelper.js");

var _require = __webpack_require__(/*! ./helper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/helper.js"),
    showCartErrorMsg = _require.showCartErrorMsg;

var bu = braintreeUtils;
var console = bu.console;
var pid;
var uuid;
var removeFromCartUrl;
var loader;
var $price;
var sdkUrlConfiguration;
var isZeroAmount = false;
var $braintreePDPButton = document.querySelector('.braintree_pdp_button');
var $miniCartQuantity = document.querySelector('.minicart-quantity');
var $addToCartButton = document.querySelector('.add-to-cart') || document.querySelector('.add-to-cart-global');
var $paypalCartButton = document.querySelector('.js_braintree_paypal_cart_button');
var $paypalBillingButton = document.querySelector('.js_braintree_paypal_billing_button');

function Constructor(initParams, $btn) {
  var params = initParams;
  this.params = initParams;
  params.options = params.options || {};
  this.$btn = $btn;
  var $errorContainer = document.createElement('div');
  $errorContainer.className = 'error';

  if (params.$errorContainer) {
    $errorContainer = params.$errorContainer;
    delete params.$errorContainer;
  }

  var $loaderContainter = document.querySelector('.braintreePayPalLoader');
  var $braintreePaypalRiskDataInput = document.querySelector('input[name=braintreePaypalRiskData]');

  if (params.$loaderContainer) {
    $loaderContainter = params.$loaderContainer;
  }

  $btn.parentNode.insertBefore($errorContainer, $btn.nextSibling);
  this.er = bu.createErrorInstance($errorContainer);
  loader = loaderInstance($loaderContainter);
  this.loader = loader;
  var that = this;

  if (params.isFraudToolsEnabled) {
    loader.show();
    braintree.dataCollector.create({
      authorization: bu.clientToken,
      paypal: true,
      kount: false
    }, function (error, data) {
      loader.hide();

      if (error) {
        console.log(error);
        return;
      }

      if ($braintreePaypalRiskDataInput) {
        $braintreePaypalRiskDataInput.value = data.deviceData;
      }

      params.riskData = data.deviceData;
    });
  }

  if ($braintreePDPButton) {
    $price = document.querySelector('.price .sales .value'); // Check minicart quantity and hide PDPbutton if it is not empty

    if ($miniCartQuantity && parseInt($miniCartQuantity.textContent, 0) > 0 || $price && $price.getAttribute('content') === '0.00') {
      // Check if product price is zero
      paypalHelper.hidePDPButton($braintreePDPButton);
    }
  }

  loader.show();
  braintree.client.create({
    authorization: bu.clientToken
  }).then(function (clientInstance) {
    return braintree.paypalCheckout.create({
      client: clientInstance
    });
  }).then(function (paypalCheckoutInstance) {
    if ($braintreePDPButton) {
      if ($addToCartButton.disabled) {
        paypalHelper.hidePDPButton($braintreePDPButton);
      }

      $('body').on('cart:update', function () {
        $miniCartQuantity = parseInt(document.querySelector('.minicart-quantity').textContent, 0);

        if ($addToCartButton.disabled) {
          paypalHelper.hidePDPButton($braintreePDPButton);
        }

        if ($miniCartQuantity === 0 && !$addToCartButton.disabled) {
          paypalHelper.showPDPButton($braintreePDPButton);
        }
      });
      $('body').on('product:afterAddToCart', function () {
        paypalHelper.hidePDPButton($braintreePDPButton);
      }); // Update addToCart button status

      $('body').on('product:statusUpdate', function () {
        $miniCartQuantity = parseInt(document.querySelector('.minicart-quantity').textContent, 0);
        $price = document.querySelector('.price .sales .value');
        isZeroAmount = false;

        if ($braintreePDPButton && $price) {
          isZeroAmount = $price.getAttribute('content') === '0.00';
        }

        if ($miniCartQuantity === 0) {
          if ($addToCartButton.disabled || isZeroAmount) {
            paypalHelper.hidePDPButton($braintreePDPButton);
          }

          if (!$addToCartButton.disabled && !isZeroAmount) {
            paypalHelper.showPDPButton($braintreePDPButton);
          }
        }
      });
    }

    var payment = function payment() {
      if ($braintreePDPButton && $braintreePDPButton.style.display === '') {
        that.er.hide();
        var res = braintreeUtils.pdpOnlickForAsignedPaypalPayment();

        if (res.cart) {
          uuid = res.pliUUID;
          removeFromCartUrl = res.cart.actionUrls.removeProductLineItemUrl;
          pid = res.pid;
          that.params.options.amount = parseFloat(res.cart.totals.grandTotal.replace(/\$|,/g, ''));
        } else {
          throw new Error(res.message || 'Error occurs');
        }
      }

      return paypalCheckoutInstance.createPayment(that.params.options);
    };

    var paypalButtonConfig = {
      locale: params.options.locale,
      onApprove: function onApprove(data) {
        if (params.options.intent === 'order') {
          data.intent = 'order';
        }

        return paypalCheckoutInstance.tokenizePayment(data).then(function (payload) {
          params.onTokenizePayment(payload, that);
        });
      },
      onCancel: function onCancel(a, b) {
        if (typeof params.options.onCancel === 'function') {
          params.options.onCancel(a, b);
        }

        if ($braintreePDPButton && $braintreePDPButton.style.display === '') {
          var urlParams = {
            pid: pid,
            uuid: uuid
          };
          $.ajax({
            url: paypalHelper.appendToUrl(removeFromCartUrl, urlParams),
            type: 'get',
            dataType: 'json',
            success: function success() {
              $.spinner().stop();
            },
            error: function error() {
              $.spinner().stop();
            }
          });
        }
      },
      onError: function onError(err) {
        that.er.show(err.message.split(/\r?\n/g)[0]);

        if ($braintreePDPButton && $braintreePDPButton.style.display === '' && pid) {
          var productID = pid;
          var urlParams = {
            pid: productID,
            uuid: uuid
          };
          $.ajax({
            url: paypalHelper.appendToUrl(removeFromCartUrl, urlParams),
            type: 'get',
            dataType: 'json',
            success: function success() {
              $.spinner().stop();
            },
            error: function error() {
              $.spinner().stop();
            }
          });
        }
      }
    };
    isZeroAmount = that.params.options.amount === 0;

    if (isZeroAmount) {
      var zeroAmountErrorMsg = 'Order total 0 is not allowed for PayPal';

      paypalButtonConfig.onClick = function (_, actions) {
        if ($paypalCartButton) showCartErrorMsg(zeroAmountErrorMsg);
        if ($paypalBillingButton) paypalHelper.showCheckoutErrorMsg(zeroAmountErrorMsg);
        return actions.reject();
      };
    }

    if (params.options && params.options.flow === 'checkout') {
      paypalButtonConfig.createOrder = payment;
      sdkUrlConfiguration = {
        intent: params.options.intent,
        currency: params.options.currency,
        components: 'buttons,messages',
        commit: false
      };
    } else {
      paypalButtonConfig.createBillingAgreement = payment;
      sdkUrlConfiguration = {
        vault: true,
        components: 'buttons,messages'
      };
    }

    paypalButtonConfig = $.extend(false, paypalButtonConfig, that.params.paypalConfig);
    loader.hide();

    if (!window.isPayPalSDKLoaded) {
      paypalCheckoutInstance.loadPayPalSDK(sdkUrlConfiguration).then(function () {
        window.isPayPalSDKLoaded = true;
        return paypal.Buttons(paypalButtonConfig).render(that.$btn);
      });
    } else {
      return paypal.Buttons(paypalButtonConfig).render(that.$btn);
    }
  }).catch(function (err) {
    console.error('Error!', err);
    loader.hide();
  });
}

Constructor.prototype.updateAmount = function (amount) {
  this.params.options.amount = amount;
};

Constructor.prototype.updateShippingAddress = function (data) {
  this.params.options.shippingAddressOverride = data;
};

module.exports = {
  init: function init(params, $btn) {
    bu.clientToken = params.clientToken;
    $.extend(bu.messages, params.messages);
    return new Constructor(params, $btn);
  }
};

/***/ }),

/***/ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeSrc.js":
/*!*********************************************************************************************!*\
  !*** ./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeSrc.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable no-undef */


var braintreeUtils = __webpack_require__(/*! ./braintreeUtils */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeUtils.js");

var loaderInstance = __webpack_require__(/*! ./loaderHelper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/loaderHelper.js");

var bu = braintreeUtils;
var loader;

function Constructor(initParams, $btn) {
  this.$btn = $btn;
  var $errorContainer = document.createElement('div');
  $errorContainer.className = 'error';
  var $loaderContainter = document.querySelector('.braintreeSrcLoader');
  loader = loaderInstance($loaderContainter);
  this.loader = loader;
  $btn.parentNode.insertBefore($errorContainer, $btn.nextSibling);
  this.params = initParams;
  this.er = bu.createErrorInstance($errorContainer);
}

Constructor.prototype.loadSrcButton = function () {
  var that = this;
  var params = that.params;
  this.$braintreeSrcDeviceDataInput = document.querySelector('input[name=braintreeSrcDeviceDataInput]');
  that.loader.show();
  braintree.client.create({
    authorization: params.clientToken
  }, function (clientErr, clientInstance) {
    if (clientErr) {
      that.er.show(clientErr);
      that.loader.hide();
      return;
    }

    if (params.isFraudToolsEnabled) {
      braintree.dataCollector.create({
        client: clientInstance,
        paypal: true
      }, function (dataCollectorErr, dataCollectorInstance) {
        if (dataCollectorErr) {
          that.er.show(dataCollectorErr);
          return;
        }

        if (that.$braintreeSrcDeviceDataInput) {
          that.$braintreeSrcDeviceDataInput.value = dataCollectorInstance.deviceData;
        }

        that.loader.hide();
      });
    }

    braintree.visaCheckout.create({
      client: clientInstance
    }, function (srcPaymentErr, visaCheckoutInstance) {
      if (srcPaymentErr) {
        that.er.show(srcPaymentErr);
        that.loader.hide();
        return;
      }

      var baseInitOptions = {
        paymentRequest: {
          currencyCode: 'USD',
          subtotal: params.options.amount
        },
        settings: {
          locale: params.settings.locale,
          payment: {
            cardBrands: params.settings.cardBrands,
            acceptCanadianVisaDebit: params.settings.acceptCanadianVisaDebit
          }
        }
      };
      var initOptions = visaCheckoutInstance.createInitOptions(baseInitOptions);
      initOptions.settings.shipping = {
        collectShipping: params.options.isShippingAddressRequired
      };
      V.init(initOptions);
      that.loader.hide();
      V.on('payment.success', function (payment) {
        visaCheckoutInstance.tokenize(payment, function (tokenizeErr, payload) {
          if (tokenizeErr) {
            // eslint-disable-next-line no-console
            console.error('Error during Visa Checkout tokenization', tokenizeErr);
          } else {
            var billingAddress = payload.billingAddress;
            payload.billingAddressString = JSON.stringify({
              recipientName: billingAddress.firstName + ' ' + billingAddress.lastName,
              phone: billingAddress.phoneNumber,
              countryCodeAlpha2: billingAddress.countryCode,
              streetAddress: billingAddress.streetAddress,
              extendedAddress: billingAddress.streetAddress,
              locality: billingAddress.locality,
              region: billingAddress.region,
              postalCode: billingAddress.postalCode,
              email: payload.userData.userEmail
            });
            params.onTokenizePayment(payload);
          }
        });
      });
    });
  });
};

Constructor.prototype.updateAmount = function (amount) {
  this.params.options.amount = amount;
};

module.exports = {
  init: function init(params, $btn) {
    bu.clientToken = params.clientToken;
    return new Constructor(params, $btn);
  }
};

/***/ }),

/***/ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeUtils.js":
/*!***********************************************************************************************!*\
  !*** ./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeUtils.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* global braintree $ */

/* eslint no-console: 'off' */

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var isDebugMode = true;

if (console && isDebugMode) {
  var consoleLog = console.log;
  var consoleError = console.error;

  console.log = function () {
    consoleLog.apply(console, arguments);
  };

  console.error = function () {
    consoleError.apply(console, arguments);
  };
} else {
  console = {
    // eslint-disable-line no-global-assign
    log: function log() {},
    error: function error() {}
  };
}

var bu = {
  pdpOnlickForAsignedPaypalPayment: function pdpOnlickForAsignedPaypalPayment() {
    var $bundleItem = $('.bundle-item');

    function getOptions($productContainer) {
      var options = $productContainer.find('.product-option').map(function () {
        var $elOption = $(this).find('.options-select');
        var urlValue = $elOption.val();
        var selectedValueId = $elOption.find('option[value="' + urlValue + '"]').data('value-id');
        return {
          optionId: $(this).data('option-id'),
          selectedValueId: selectedValueId
        };
      }).toArray();
      return JSON.stringify(options);
    }

    var pid = $('.product-detail:not(".bundle-item")').data('pid');
    var $btn = $('.braintree_pdp_button');
    var $productContainer = $btn.closest('.product-detail');
    var form = {
      pid: pid,
      quantity: $('.quantity-select').val()
    };

    if (!$bundleItem.length) {
      form.options = getOptions($productContainer);
    } else {
      var items = $bundleItem.map(function () {
        return {
          pid: $(this).find('.product-id').text(),
          quantity: parseInt($(this).find('label.quantity').data('quantity'), 10)
        };
      });
      form.childProducts = JSON.stringify(items.toArray());
    }

    var response = $.ajax({
      url: $('.add-to-cart-url').val(),
      method: 'POST',
      async: false,
      data: form
    }).responseJSON;
    response.pid = pid;
    return response;
  },
  getSelectedData: function getSelectedData(selectEl) {
    if (!selectEl) {
      return null;
    }

    var options = selectEl.getElementsByTagName('option');
    var option = null;

    for (var i = 0; i < options.length; i++) {
      option = options[i];

      if (option.selected) {
        break;
      }
    }

    return option.attributes;
  },
  postData: function postData(url, data) {
    var formData = new FormData();

    for (var key in data) {
      formData.append(key, data[key]);
    }

    $.ajax({
      url: url,
      data: formData,
      processData: false,
      contentType: false,
      type: 'POST',
      success: function success(res) {
        window.location.href = res.redirectUrl;
      },
      error: function error() {
        location.reload();
      }
    });
  },
  messages: {},
  errorInstances: [],
  createErrorInstance: function createErrorInstance(containerElement, callback) {
    if (!containerElement) {
      console.error('Braintree: No container for showing erros');
    }

    function Constructor(cb) {
      bu.errorInstances.push(this);
      this.containerEl = containerElement;
      this.cb = typeof cb === 'function' ? cb : function () {};
    }

    Constructor.prototype.show = function (error) {
      var text = '';

      if (typeof error === 'string') {
        text = error;
      }

      if (_typeof(error) === 'object') {
        var msg = bu.messages[error.code];
        text = msg || error.message;
        this.cb(this, error);

        if (error.code === 'PAYPAL_POPUP_CLOSED') {
          return;
        }
      }

      this.containerEl.style.display = '';
      this.containerEl.innerHTML = text;
    };

    Constructor.prototype.hide = function () {
      this.containerEl.innerHTML = '';
    };

    return new Constructor(callback);
  },
  clientToken: null
};
bu.console = console;
module.exports = bu;

/***/ }),

/***/ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeVenmo.js":
/*!***********************************************************************************************!*\
  !*** ./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeVenmo.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable no-use-before-define */

/* global braintreeUtils braintree $ VenmoSession */

var braintreeUtils = __webpack_require__(/*! ./braintreeUtils */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeUtils.js");

var loaderInstance = __webpack_require__(/*! ./loaderHelper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/loaderHelper.js");

var bu = braintreeUtils;

function Constructor(initParams, $btn) {
  var $errorContainer = document.createElement('div');
  $errorContainer.className = 'venmo-error';
  var $loaderContainter = document.createElement('div');
  $loaderContainter.className = 'braintree-loader';
  this.$braintreeVenmoRiskDataInput = document.querySelector('input[name=braintreeVenmoRiskData]');
  this.$btn = $btn;
  this.params = initParams;

  if (initParams.$errorContainer) {
    $errorContainer = initParams.$errorContainer;
    delete initParams.$errorContainer;
  }

  if (initParams.$loaderContainer) {
    $loaderContainter = initParams.$loaderContainer;
  }

  $btn.parentNode.insertBefore($errorContainer, $btn.nextSibling);
  this.er = bu.createErrorInstance($errorContainer);
  this.loader = loaderInstance($loaderContainter);
}

Constructor.prototype.createVenmo = function () {
  var that = this;
  var isBrowserSupported;
  that.loader.show();
  braintree.client.create({
    authorization: bu.clientToken
  }, function (clientErr, clientInstance) {
    // Stop if there was a problem creating the client.
    // This could happen if there is a network error or if the authorization
    // is invalid.
    if (clientErr) {
      that.er.show(clientErr);
      return;
    }

    braintree.dataCollector.create({
      client: clientInstance,
      paypal: true
    }, function (dataCollectorErr, dataCollectorInstance) {
      if (dataCollectorErr) {
        that.er.show(dataCollectorErr);
        return;
      }

      if (that.$braintreeVenmoRiskDataInput) {
        that.$braintreeVenmoRiskDataInput.value = dataCollectorInstance.deviceData;
      }

      that.loader.hide();
    });
    isBrowserSupported = braintree.venmo.isBrowserSupported({
      allowNewBrowserTab: false,
      allowDesktop: true
    }); // Verify browser support before proceeding.

    if (isBrowserSupported) {
      braintree.venmo.create({
        client: clientInstance,
        allowNewBrowserTab: false,
        ignoreHistoryChanges: true,
        allowDesktop: true
      }, function (venmoErr, venmoInstance) {
        if (venmoErr) {
          that.er.show(venmoErr);
          return;
        } // Verify browser support before proceeding.


        if (!venmoInstance.isBrowserSupported()) {
          that.params.deviceNotSupportVenmo();
          that.loader.hide();
          return;
        }

        that.$btn.addEventListener('click', function () {
          if (!that.params.venmoAccountPage && !that.params.onClick()) {
            return;
          }

          venmoInstance.tokenize({
            processResultsDelay: 10
          }, function (tokenizeErr, payload) {
            that.loader.show();

            if (tokenizeErr) {
              handleVenmoError(tokenizeErr);
            } else {
              handleVenmoSuccess(payload);
            }
          });
          return;
        });
      });
    } else {
      that.params.deviceNotSupportVenmo();
      that.loader.hide();
      return;
    }
  });

  function handleVenmoError(err) {
    that.er.show(err);
    that.loader.hide();
  }

  function handleVenmoSuccess(payload) {
    that.er.hide();
    that.params.onTokenizePayment(payload);
    that.loader.hide();
  }
};

module.exports = {
  init: function init(params, $btn) {
    var ins = new Constructor(params, $btn);
    bu.clientToken = params.clientToken;
    return ins.createVenmo();
  }
};

/***/ }),

/***/ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/creditcard/creditcardAccount.js":
/*!*************************************************************************************************************!*\
  !*** ./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/creditcard/creditcardAccount.js ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var creditCard = __webpack_require__(/*! ../braintreeCreditCard */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeCreditCard.js");

var creditCardFields = __webpack_require__(/*! ./creditcardFields */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/creditcard/creditcardFields.js");

function submitCreditCardForm() {
  $('.js_braintree_addCreditCardForm').submit(function (e) {
    var addCreditCardForm = $(this);
    creditCard.startTokenize(function (result) {
      if (result.error) {
        e.preventDefault();
        return;
      }

      addCreditCardForm.spinner().start();
      $.ajax({
        url: addCreditCardForm.attr('action'),
        type: 'post',
        dataType: 'json',
        data: addCreditCardForm.serialize(),
        success: function success(data) {
          addCreditCardForm.spinner().stop();

          if (!data.success) {
            document.querySelector('#braintreeCreditCardErrorContainer').textContent = data.error;
          } else {
            location.href = data.redirectUrl;
          }
        },
        error: function error(err) {
          if (err.responseJSON.redirectUrl) {
            window.location.href = err.responseJSON.redirectUrl;
          }

          addCreditCardForm.spinner().stop();
        }
      });
    });
    return false;
  });
}

function initAccountAddCreditCard() {
  creditCardFields.initCreditCardFields();
  submitCreditCardForm();
}

module.exports = {
  initAccountAddCreditCard: initAccountAddCreditCard
};

/***/ }),

/***/ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/creditcard/creditcardFields.js":
/*!************************************************************************************************************!*\
  !*** ./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/creditcard/creditcardFields.js ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var creditCard = __webpack_require__(/*! ../braintreeCreditCard */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeCreditCard.js");

var $continueButton = document.querySelector('button.submit-payment');
/**
 * Gets required Additional shipping info for 3ds
 *
 * @param {Object} orderAddress - User's shipping address
 * @returns {Object} an object with required fields
 */

function getShippingAdditionalInfo(orderAddress) {
  return {
    workPhoneNumber: orderAddress.phone,
    shippingGivenName: orderAddress.recipientName.split(' ').slice(0, -1).join(' '),
    shippingSurname: orderAddress.recipientName.split(' ').slice(-1).join(' '),
    shippingPhone: orderAddress.phone,
    shippingAddress: {
      streetAddress: orderAddress.line1,
      extendedAddress: orderAddress.line2,
      locality: orderAddress.city,
      region: orderAddress.state,
      postalCode: orderAddress.postalCode,
      countryCodeAlpha2: orderAddress.countryCode
    }
  };
}

function updateData() {
  $.ajax({
    url: document.querySelector('.js_braintree_getOrderInfoUrl').value,
    type: 'get',
    dataType: 'json',
    success: function success(data) {
      data.shippingAdditionalInfo = data.shippingAddress ? getShippingAdditionalInfo(data.shippingAddress) : null;
      creditCard.updateData(data);
    },
    error: function error() {
      window.location.reload();
    }
  });
}

function initCreditCardFields() {
  document.querySelectorAll('.js_braintree_creditCardFields').forEach(function (el) {
    var $container = el;

    if (JSON.parse($container.getAttribute('data-is-inited'))) {
      return;
    }

    var config = JSON.parse($container.getAttribute('data-braintree-config'));

    if (_typeof(config) !== 'object' || config === null) {
      // eslint-disable-next-line no-console
      console.error(el, '.js_braintree_creditCardFields has not valid data-braintree-config');
      return;
    }

    config.continueButton = $continueButton;
    creditCard.initFields(config, $container);
    $container.setAttribute('data-is-inited', true);
  });
}

module.exports = {
  initCreditCardFields: initCreditCardFields,
  getShippingAdditionalInfo: getShippingAdditionalInfo,
  updateData: updateData
};

/***/ }),

/***/ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/creditcard/creditcardHelper.js":
/*!************************************************************************************************************!*\
  !*** ./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/creditcard/creditcardHelper.js ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var braintreeUtils = __webpack_require__(/*! ../braintreeUtils */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeUtils.js");

var bu = braintreeUtils;

var helper = __webpack_require__(/*! ../helper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/helper.js");

var $creditCardList = document.querySelector('#braintreeCreditCardList');
var $saveCreditCard = document.querySelector('#braintreeSaveCreditCard');
var $cardOwner = document.querySelector('#braintreeCardOwner');

function creditcardErrorContainer(errorIns, errorData) {
  var error = errorData;

  if (error.details && error.details.invalidFieldKeys) {
    for (var i = 0; i < error.details.invalidFieldKeys.length; i++) {
      var key = error.details.invalidFieldKeys[i];

      if (key === 'number') {
        document.querySelector('#braintreeCardNumber').classList.add('braintree-hosted-fields-invalid');
      }

      if (key === 'cvv') {
        document.querySelector('#braintreeCvv').classList.add('braintree-hosted-fields-invalid');
      }

      if (key === 'expirationDate') {
        document.querySelector('#braintreeExpirationDate').classList.add('braintree-hosted-fields-invalid');
      }
    }
  }

  if (error.code === 'HOSTED_FIELDS_FIELDS_EMPTY') {
    document.querySelector('#braintreeCardNumber, #braintreeCvv, #braintreeExpirationDate').classList.add('braintree-hosted-fields-invalid');
  }
}

function convertCardTypeToDwFormat(braintreeType) {
  switch (braintreeType) {
    case 'American Express':
      return 'Amex';

    case 'MasterCard':
      return 'Master';

    default:
      return braintreeType;
  }
}

function cardOwnerUpdateClasses() {
  var value = $cardOwner.value;

  if (value.length <= parseInt($cardOwner.getAttribute('maxlength'), 10) && value.length !== 0) {
    $cardOwner.parentNode.classList.add('braintree-hosted-fields-valid');
  } else {
    $cardOwner.parentNode.classList.remove('braintree-hosted-fields-valid');
    $cardOwner.parentNode.classList.remove('braintree-hosted-fields-invalid');
  }
}

function setCardFields(selectedCard, cacheCardFields) {
  cacheCardFields.cardNumbeberPh.innerHTML = selectedCard['data-number'].value;
  cacheCardFields.cardCvvPh.innerHTML = '***';
  cacheCardFields.cardExpirationPh.innerHTML = selectedCard['data-expiration'].value;
  cacheCardFields.cardOwnerPh.innerHTML = selectedCard['data-owner'].value;
  $cardOwner.value = selectedCard['data-owner'].value;
  document.querySelector('#braintreeCardType').value = selectedCard['data-type'].value;
  document.querySelector('#braintreeCardMaskNumber').value = selectedCard['data-number'].value;
}

function showCardElements(cardFields) {
  cardFields.forEach(function (el) {
    el.style.display = '';
  });
}

function hideCardElements(cardFields) {
  cardFields.forEach(function (el) {
    el.style.display = 'none';
  });
}

function getCardFieldsPH() {
  return [document.querySelector('#braintreeCardOwnerPh'), document.querySelector('#braintreeCardNumberPh'), document.querySelector('#braintreeExpirationPh'), document.querySelector('#braintreeCvvPh')];
}

function getCardFields() {
  return [document.querySelector('#braintreeCardOwner'), document.querySelector('#braintreeExpirationDate'), document.querySelector('#braintreeCardNumber'), document.querySelector('#braintreeCvv')];
}

function cardListChange() {
  var $cardOwnerPh = document.querySelector('#braintreeCardOwnerPh');
  var $cardNumbeber = document.querySelector('#braintreeCardNumber');
  var $cardNumbeberPh = document.querySelector('#braintreeCardNumberPh');
  var $cardCvv = document.querySelector('#braintreeCvv');
  var $cardCvvPh = document.querySelector('#braintreeCvvPh');
  var $cardExpiration = document.querySelector('#braintreeExpirationDate');
  var $cardExpirationPh = document.querySelector('#braintreeExpirationPh');
  var $braintreeSaveCardContainer = document.querySelector('#braintreeSaveCardContainer');
  var $creditCardFieldsContainer = document.querySelector('#braintreeCreditCardFieldsContainer');
  var $braintree3DSecureContainer = document.querySelector('#braintree3DSecureContainer');
  var changeCardOwnerInput;
  var selectedCard;
  var isSaveCard;
  var cacheCardFields = {
    cardNumbeberPh: $cardNumbeberPh,
    cardCvvPh: $cardCvvPh,
    cardExpirationPh: $cardExpirationPh,
    cardOwnerPh: $cardOwnerPh
  };
  var nonce;

  if ($cardOwner) {
    if (typeof Event === 'function') {
      changeCardOwnerInput = new Event('changeCardOwnerInput');
      $cardOwner.addEventListener('changeCardOwnerInput', function () {
        'change';
      }, false);
    } else {
      changeCardOwnerInput = document.createEvent('Event');
      changeCardOwnerInput.initEvent('changeCardOwnerInput', true, true);
    }
  }

  if ($creditCardFieldsContainer) {
    $creditCardFieldsContainer.style.display = '';
  }

  if ($braintree3DSecureContainer) {
    $braintree3DSecureContainer.style.display = 'none';
  }

  document.querySelector('#braintreeCreditCardErrorContainer').textContent = '';

  if ($creditCardList.value === 'newcard') {
    hideCardElements(getCardFieldsPH());
    $cardOwner.value = $cardOwner.getAttribute('data-new-cart-value');
    $cardOwner.dispatchEvent(changeCardOwnerInput);
    $cardOwner.parentNode.classList.remove('braintree-hosted-fields-invalid');
    $cardNumbeber.parentNode.classList.remove('braintree-hosted-fields-invalid');
    $cardCvv.parentNode.classList.remove('braintree-hosted-fields-invalid');
    $cardExpiration.parentNode.classList.remove('braintree-hosted-fields-invalid');
    $cardOwner.disabled = false;
    showCardElements(getCardFields());
    cardOwnerUpdateClasses();

    if ($braintreeSaveCardContainer) {
      $braintreeSaveCardContainer.style.display = 'block';
      $saveCreditCard.checked = true;
    }

    document.querySelector('#braintreeCreditCardNonce').value = '';
    document.querySelector('#braintreeCardPaymentMethod').value = $creditCardList[0].getAttribute('data-payment-method');
  } else if ($creditCardList.selectedOptions[0].id === 'braintreeSessionCreditAccount') {
    selectedCard = bu.getSelectedData($creditCardList);
    nonce = selectedCard['data-nonce'].value;

    if ($braintreeSaveCardContainer) {
      $braintreeSaveCardContainer.style.display = 'block';
      isSaveCard = JSON.parse(selectedCard['data-save-card'].value);
      $braintreeSaveCardContainer.checked = isSaveCard;
      $saveCreditCard.checked = isSaveCard;
    }

    if (nonce) {
      document.querySelector('#braintreeCreditCardNonce').value = nonce;
    }

    setCardFields(selectedCard, cacheCardFields);
    $cardOwner.dispatchEvent(changeCardOwnerInput);
    $cardOwner.style.display = 'none';
    showCardElements(getCardFieldsPH());
    document.querySelector('#braintreeCardPaymentMethod').value = selectedCard['data-payment-method'].value.toUpperCase();
  } else {
    // case for saved card
    selectedCard = bu.getSelectedData($creditCardList);
    setCardFields(selectedCard, cacheCardFields);
    $cardOwner.dispatchEvent(changeCardOwnerInput);
    showCardElements(getCardFieldsPH());
    hideCardElements(getCardFields());
    $cardOwner.disabled = true;

    if ($braintreeSaveCardContainer) {
      $braintreeSaveCardContainer.style.display = 'none';
      $saveCreditCard.checked = false;
    }

    document.querySelector('#braintreeCreditCardNonce').value = '';
    document.querySelector('#braintreeCardPaymentMethod').value = selectedCard['data-payment-method'].value.toUpperCase();
  }
}

function initCardListAndSaveFunctionality() {
  if ($creditCardList) {
    $creditCardList.addEventListener('change', function () {
      cardListChange();
    });
  }

  cardListChange();
}

function cardOwnerEvents() {
  $cardOwner.addEventListener('focus', function () {
    $cardOwner.parentNode.classList.add('braintree-hosted-fields-focused');
  });
  $cardOwner.addEventListener('blur', function () {
    $cardOwner.parentNode.classList.remove('braintree-hosted-fields-focused');
  });
  $cardOwner.addEventListener('keyup', function () {
    document.querySelector('#braintreeCardOwner').setAttribute('data-new-cart-value', $cardOwner.value);
    cardOwnerUpdateClasses();
  });
  $cardOwner.addEventListener('change', function () {
    cardOwnerUpdateClasses();
  });
}
/*
    Update Session account
**/


function updateSessionAccount() {
  var sessionOption = helper.getSessionAccountOption({
    querySelector: '#braintreeCreditCardList',
    id: 'braintreeSessionCreditAccount'
  });

  if (!sessionOption) {
    return;
  }

  sessionOption.selected = false;
  sessionOption.classList.add('used-creditcard-account-hide');
  sessionOption.classList.remove('used-creditcard-account');
  sessionOption.text = '';
  sessionOption.setAttribute('data-session-account', false);
  sessionOption.setAttribute('data-owner', false);
  sessionOption.setAttribute('data-expiration', false);
  sessionOption.setAttribute('data-number', false);
  sessionOption.setAttribute('data-nonce', false);
  sessionOption.setAttribute('data-type', false);
  sessionOption.setAttribute('data-save-card', false);
}
/*
    Check if creditcard method was used and change appearance of creditcard tab
**/


function removeSessionNonce() {
  updateSessionAccount();
  document.querySelector('#braintreeCreditCardNonce').value = '';
  document.querySelector('#cardNumber').value = '';
  document.querySelector('#braintreeCardMaskNumber').value = '';
  document.querySelector('#braintreeCardExpirationYear').value = '';
  document.querySelector('#braintreeCardExpirationMonth').value = '';
  var defaultOption = helper.getOptionByDataDefault('#braintreeCreditCardList');

  if (defaultOption) {
    defaultOption.selected = true;
    var selectedCard = bu.getSelectedData($creditCardList);
    var cardFieldsPH = {
      cardNumbeberPh: document.querySelector('#braintreeCardNumberPh'),
      cardCvvPh: document.querySelector('#braintreeCvvPh'),
      cardExpirationPh: document.querySelector('#braintreeExpirationPh'),
      cardOwnerPh: document.querySelector('#braintreeCardOwnerPh')
    };
    setCardFields(selectedCard, cardFieldsPH);
    $cardOwner.disabled = true;
    $saveCreditCard.checked = false;
    document.querySelector('#braintreeSaveCardContainer').style.display = 'none';
  } else {
    hideCardElements(getCardFieldsPH());
    showCardElements(getCardFields());
    var ccAccount = document.querySelector('.form-group.braintree_used_creditcard_account');
    ccAccount.classList.remove('used-creditcard-account');
    ccAccount.classList.add('used-creditcard-account-hide');
  }

  [].forEach.call(document.querySelector('#braintreeCreditCardList'), function (el) {
    if (el.style.display === 'none') el.style.display = 'block';
  });
}

module.exports = {
  creditcardErrorContainer: creditcardErrorContainer,
  convertCardTypeToDwFormat: convertCardTypeToDwFormat,
  cardOwnerEvents: cardOwnerEvents,
  initCardListAndSaveFunctionality: initCardListAndSaveFunctionality,
  removeSessionNonce: removeSessionNonce,
  showCardElements: showCardElements,
  hideCardElements: hideCardElements,
  setCardFields: setCardFields,
  getCardFieldsPH: getCardFieldsPH,
  getCardFields: getCardFields,
  updateSessionAccount: updateSessionAccount
};

/***/ }),

/***/ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/creditcard/creditcardPayment.js":
/*!*************************************************************************************************************!*\
  !*** ./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/creditcard/creditcardPayment.js ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var braintreeUtils = __webpack_require__(/*! ../braintreeUtils */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeUtils.js");

var creditCard = __webpack_require__(/*! ../braintreeCreditCard */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeCreditCard.js");

var helper = __webpack_require__(/*! ../helper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/helper.js");

var creditcardHelper = __webpack_require__(/*! ../creditcard/creditcardHelper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/creditcard/creditcardHelper.js");

var $continueButton = document.querySelector('button.submit-payment');
var $creditCardList = document.querySelector('#braintreeCreditCardList');

function doNotAllowSubmitForm() {
  helper.continueButtonToggle(false);
  $continueButton.setAttribute('data-is-allow-submit-form', false);
}

function hide3DSecureContainer() {
  document.querySelector('#braintreeCreditCardFieldsContainer').style.display = '';
  document.querySelector('#braintreeSaveCardContainer').style.display = '';
  document.querySelector('#braintree3DSecureContainer').style.display = 'none';
  doNotAllowSubmitForm();
}

function updateAccountsList() {
  var sessionAccount = document.querySelector('#braintreeSessionCreditAccount');
  var defaultOption = helper.getOptionByDataDefault('#braintreeCreditCardList');

  if ($creditCardList && $creditCardList.value !== 'newcard') {
    if (!sessionAccount.selected) {
      creditcardHelper.updateSessionAccount();
    }

    return;
  }

  var creditCardAccount = document.querySelector('.form-group.braintree_used_creditcard_account');
  var newCCAccount = document.getElementById('newCardAccount');

  if (!creditCardAccount.classList.contains('used-creditcard-account')) {
    creditCardAccount.classList.remove('used-creditcard-account-hide');
    creditCardAccount.classList.add('used-creditcard-account');
    sessionAccount.classList.remove('used-creditcard-account-hide');
    sessionAccount.classList.add('used-creditcard-account');
  } else {
    sessionAccount.classList.remove('used-creditcard-account-hide');
    sessionAccount.classList.add('used-creditcard-account');
  }

  if (newCCAccount.selected) {
    var isSavedCard = document.querySelector('#braintreeSaveCreditCard') ? document.querySelector('#braintreeSaveCreditCard').checked : false;
    sessionAccount.setAttribute('data-session-account', true);
    sessionAccount.setAttribute('data-save-card', isSavedCard);
    sessionAccount.textContent = sessionAccount.getAttribute('data-type') + ' ' + sessionAccount.getAttribute('data-number') + ' ' + sessionAccount.getAttribute('data-expiration') + ' ' + document.querySelector('#braintreeCardOwner').getAttribute('data-new-cart-value');
    sessionAccount.setAttribute('data-nonce', document.querySelector('#braintreeCreditCardNonce').value);
    newCCAccount.removeAttribute('selected');
    sessionAccount.selected = true;
  }

  if (!defaultOption) {
    var selectedCard = braintreeUtils.getSelectedData($creditCardList);
    var cardFieldsPH = {
      cardOwnerPh: document.querySelector('#braintreeCardOwnerPh'),
      cardNumbeberPh: document.querySelector('#braintreeCardNumberPh'),
      cardCvvPh: document.querySelector('#braintreeCvvPh'),
      cardExpirationPh: document.querySelector('#braintreeExpirationPh')
    };
    creditcardHelper.setCardFields(selectedCard, cardFieldsPH);
  }

  creditCard.clearHostedFields();
  creditcardHelper.showCardElements(creditcardHelper.getCardFieldsPH());
  creditcardHelper.hideCardElements(creditcardHelper.getCardFields());
  helper.continueButtonToggle(false);
}

function allowSubmitForm(event) {
  $continueButton.setAttribute('data-is-allow-submit-form', true);
  updateAccountsList();
  event.target.click();
}

function isActiveCreditCardTab() {
  return document.querySelector('.payment-options[role=tablist] a[data-toggle="tab"][href="#creditcard-content"]').classList.contains('active');
}

function makeCreditCardPayment(event) {
  if (JSON.parse($continueButton.getAttribute('data-is-allow-submit-form')) && creditCard.isFormValid()) {
    return;
  }

  if ($creditCardList) {
    var is3dSecureEnabled = JSON.parse(document.querySelector('.js_braintree_creditCardFields').getAttribute('data-braintree-config')).is3dSecureEnabled;

    if ($creditCardList && $creditCardList.value !== 'newcard') {
      if (!is3dSecureEnabled) {
        allowSubmitForm(event);
        return;
      }

      if ($creditCardList.value === 'sessioncard') {
        allowSubmitForm(event);
        return;
      }

      var selectedCard = braintreeUtils.getSelectedData($creditCardList);
      var getNonceUrl = $creditCardList.getAttribute('data-get-payment-nonce-url');
      var cardUUID = selectedCard['data-id'].value;
      $.get("".concat(getNonceUrl, "?id=").concat(cardUUID), function (response) {
        creditCard.startTokenize(function (result) {
          if (!result.error) {
            allowSubmitForm(event);
          }
        }, response);
      });
      event.preventDefault();
      event.stopPropagation();
      return;
    }
  }

  creditCard.startTokenize(function (result) {
    if (!result.error) allowSubmitForm(event);
  });
  event.preventDefault();
  event.stopPropagation();
}

module.exports = {
  doNotAllowSubmitForm: doNotAllowSubmitForm,
  hide3DSecureContainer: hide3DSecureContainer,
  makeCreditCardPayment: makeCreditCardPayment
};

/***/ }),

/***/ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/googlepay/googlepayAccount.js":
/*!***********************************************************************************************************!*\
  !*** ./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/googlepay/googlepayAccount.js ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var googlepay = __webpack_require__(/*! ../braintreeGooglepay */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeGooglepay.js");

var loaderInstance = __webpack_require__(/*! ../loaderHelper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/loaderHelper.js");

function submitAddGooglePayAccountForm() {
  $('.js_braintree_addGooglePayAccountForm').submit(function () {
    var $form = $(this);
    var $btFormErrorContainer = document.querySelector('#braintreeFormErrorContainer');
    $form.spinner().start();
    $.post($form.attr('action'), $form.serialize()).done(function (data) {
      $form.spinner().stop();

      if (!data.success) {
        $btFormErrorContainer.style.display = 'block';
        $btFormErrorContainer.textContent = data.error;
      } else {
        location.href = data.redirectUrl;
      }
    }).fail(function (err) {
      if (err.responseJSON.redirectUrl) {
        window.location.href = err.responseJSON.redirectUrl;
      }

      $form.spinner().stop();
    });
    return false;
  });
}

function initAddGooglePayAccount() {
  var $btn = document.querySelector('.js_braintree_accountgooglepay_button');
  var $googlepayNonce = document.querySelector('#braintreeGooglePayNonce');
  var $btGooglePayLoader = document.querySelector('.braintreeGooglepayLoader');
  var googlepayIns;
  var loader = loaderInstance($btGooglePayLoader);

  if (JSON.parse($btn.getAttribute('data-is-inited'))) {
    return;
  }

  var config = JSON.parse($btn.getAttribute('data-braintree-config'));

  if (_typeof(config) !== 'object' || config === null) {
    // eslint-disable-next-line no-console
    console.error($btn, 'not valid data-braintree-config');
    return;
  }

  loader.show();

  config.onTokenizePayment = function (data, result) {
    var $btFormErrorContainer = document.querySelector('#braintreeFormErrorContainer');

    if ($btFormErrorContainer.style.display === 'block') {
      $btFormErrorContainer.style.display = 'none';
      $btFormErrorContainer.textContent = '';
    }

    if (result.type === 'PayPalAccount') {
      $btFormErrorContainer.style.display = 'block';
      $btFormErrorContainer.textContent = config.messages.saving_paypal_account_error;
      return;
    }

    $googlepayNonce.value = result.nonce;
    document.querySelector('.braintreeGooglePayBtn').click();
  };

  googlepayIns = googlepay.init(config, $btn);
  googlepayIns.createGooglepay();
  $btn.setAttribute('data-is-inited', true);
  submitAddGooglePayAccountForm();
}

module.exports = {
  initAddGooglePayAccount: initAddGooglePayAccount
};
/* eslint no-use-before-define: 2 */
// --> ON

/***/ }),

/***/ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/googlepay/googlepayHelper.js":
/*!**********************************************************************************************************!*\
  !*** ./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/googlepay/googlepayHelper.js ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var helper = __webpack_require__(/*! ../helper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/helper.js");

var $googlepayContent = document.querySelector('.js_braintree_googlepayContent');
var $btGooglepayAccountsList = document.querySelector('#braintreeGooglepayAccountsList');
var $googlepayButton = document.querySelector('.js_braintree_googlepay_button');
var $saveGooglePayAccountCheckbox = document.querySelector('#braintreeSaveGooglepayAccount');
var $googlepayTab = document.querySelector('.googlepay-tab');

function showGooglepayAccount() {
  var $sessionAccount = document.querySelector('#sessionGPAccount');
  $sessionAccount.classList.remove('used-googlepay-account-hide');
  $sessionAccount.classList.add('used-googlepay-account');
  var $gpAccount = document.querySelector('.form-group.braintree_used_googlepay_account');
  $gpAccount.classList.remove('used-googlepay-account-hide');
  $gpAccount.classList.add('used-googlepay-account');
  $googlepayButton.style.display = 'none';
  $googlepayContent.setAttribute('data-paypal-is-hide-continue-button', false);
  helper.continueButtonToggle(false);
}

function hideShowButtons() {
  if ($btGooglepayAccountsList.value === 'newaccount') {
    $googlepayButton.style.display = 'block';

    if ($googlepayTab.classList.contains('active')) {
      helper.continueButtonToggle(true);
    }

    $googlepayContent.setAttribute('data-paypal-is-hide-continue-button', true);

    if ($saveGooglePayAccountCheckbox) {
      $saveGooglePayAccountCheckbox.checked = true;
    }
  } else {
    $googlepayButton.style.display = 'none';
    helper.continueButtonToggle(false);
    $googlepayContent.setAttribute('data-paypal-is-hide-continue-button', false);

    if ($saveGooglePayAccountCheckbox) {
      $saveGooglePayAccountCheckbox.checked = JSON.parse(document.querySelector('#sessionGPAccount').getAttribute('data-save'));
    }
  }
}

function createGooglepayBillingAddressData(data) {
  var billingData = data.paymentMethodData.info.billingAddress;
  var billingAddress = {};
  var recipientName = billingData.name.split(' ');
  billingAddress.firstName = recipientName[0];
  billingAddress.lastName = recipientName[1];
  billingAddress.phone = billingData.phoneNumber;
  billingAddress.countryCodeAlpha2 = billingData.countryCode;
  billingAddress.streetAddress = billingData.address1;
  billingAddress.extendedAddress = billingData.address2;
  billingAddress.locality = billingData.locality;
  billingAddress.stateCode = billingData.administrativeArea;
  billingAddress.postalCode = billingData.postalCode;
  billingAddress.email = data.email;
  return billingAddress;
}

function createGooglepayShippingAddressData(shippingData) {
  var shippingAddress = {};
  var recipientName = shippingData.name.split(' ');
  shippingAddress.firstName = recipientName[0];
  shippingAddress.lastName = recipientName[1];
  shippingAddress.phone = shippingData.phoneNumber;
  shippingAddress.countryCodeAlpha2 = shippingData.countryCode;
  shippingAddress.streetAddress = shippingData.address1;
  shippingAddress.extendedAddress = shippingData.address2;
  shippingAddress.locality = shippingData.locality;
  shippingAddress.region = shippingData.administrativeArea;
  shippingAddress.postalCode = shippingData.postalCode;
  return shippingAddress;
}
/*
    Remove method was used and change appearance of googlepay tab
**/


function removeSessionNonce() {
  var $gpAccount = document.querySelector('.form-group.braintree_used_googlepay_account');
  $gpAccount.classList.remove('used-googlepay-account');
  $gpAccount.classList.add('used-googlepay-account-hide');
  var $sessionAccount = document.querySelector('#sessionGPAccount');
  $sessionAccount.classList.add('used-googlepay-account-hide');
  $sessionAccount.classList.remove('used-googlepay-account');
  $sessionAccount.value = '';
  $sessionAccount.text = '';
  $sessionAccount.setAttribute('data-session-account', false);
  $sessionAccount.setAttribute('data-save', false);
  document.querySelector('#braintreeGooglePayNonce').value = '';
  document.querySelector('#braintreeGooglePayBillingAddress').value = '';
  document.querySelector('#braintreeGooglepayPaymentType').value = '';
  document.querySelector('#braintreeGooglePayDeviceData').value = '';
  document.querySelector('#newGPAccount').selected = true;
  hideShowButtons();
}

module.exports = {
  showGooglepayAccount: showGooglepayAccount,
  createGooglepayBillingAddressData: createGooglepayBillingAddressData,
  createGooglepayShippingAddressData: createGooglepayShippingAddressData,
  removeSessionNonce: removeSessionNonce,
  hideShowButtons: hideShowButtons
};

/***/ }),

/***/ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/googlepay/googlepayPayment.js":
/*!***********************************************************************************************************!*\
  !*** ./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/googlepay/googlepayPayment.js ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var googlepay = __webpack_require__(/*! ../braintreeGooglepay */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeGooglepay.js");

var _require = __webpack_require__(/*! ./googlepayHelper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/googlepay/googlepayHelper.js"),
    hideShowButtons = _require.hideShowButtons,
    createGooglepayBillingAddressData = _require.createGooglepayBillingAddressData,
    createGooglepayShippingAddressData = _require.createGooglepayShippingAddressData,
    showGooglepayAccount = _require.showGooglepayAccount;

var _require2 = __webpack_require__(/*! ../helper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/helper.js"),
    removeActiveSessionPayment = _require2.removeActiveSessionPayment,
    createPaymentFormData = _require2.createPaymentFormData,
    showCartErrorMsg = _require2.showCartErrorMsg,
    updateBillingFormValues = _require2.updateBillingFormValues;

var $googlepayButton = document.querySelector('.js_braintree_googlepay_button');
var $btGooglepayAccountsList = document.querySelector('#braintreeGooglepayAccountsList');
var $googlepayOnCart = document.querySelector('.braintree-cart-google-button');
var $googlepayNonce = document.querySelector('#braintreeGooglePayNonce');
var $googlepayCardDescription = document.querySelector('#braintreeGooglePayCardDescription');
var $braintreeGooglepayPaymentType = document.querySelector('#braintreeGooglepayPaymentType');
var $googlePayBillingAddress = document.querySelector('#braintreeGooglePayBillingAddress');

function makeGooglepayPayment(continueButton) {
  var googlepayIns;
  var config = JSON.parse($googlepayButton.getAttribute('data-braintree-config'));

  if (_typeof(config) !== 'object' || config === null) {
    // eslint-disable-next-line no-console
    console.error($googlepayButton, 'not valid data-braintree-config');
  }

  if ($btGooglepayAccountsList) {
    $btGooglepayAccountsList.addEventListener('change', function () {
      hideShowButtons();
    });
    hideShowButtons();

    if ($googlepayCardDescription.value === 'GooglePay') {
      $googlepayCardDescription.value = $btGooglepayAccountsList.selectedOptions[0].label;
    }
  }

  config.onTokenizePayment = function (data, result) {
    var deviceData = document.querySelector('input[name=braintreeGooglePayDeviceDataInput]').value;
    var googlepayNonce = result.nonce;
    var googlepayPaymentType = result.type;
    var googlepayCardDescription = result.details.cardType + ' ' + result.details.lastFour;
    removeActiveSessionPayment();

    if (data) {
      var billingAddressData = createGooglepayBillingAddressData(data);

      if ($googlepayOnCart) {
        var $braintreeCartButtons = document.querySelector('.braintree-cart-buttons-wrap');
        var placeOrderUrl = $braintreeCartButtons.getAttribute('data-checkout-placeorder-url');
        var checkoutFromCartUrl = $braintreeCartButtons.getAttribute('data-checkout-from-cart-url');
        var checkoutFormFields = $braintreeCartButtons.getAttribute('data-checkout-form-fields');
        var csrfToken = document.querySelector('.braintree-cart-buttons-wrap  #csrf_token');
        var shippingAddressData = createGooglepayShippingAddressData(data.shippingAddress);
        var googlepayCheckoutFormData = createPaymentFormData(checkoutFormFields, {
          firstName: billingAddressData.firstName,
          lastName: billingAddressData.lastName,
          address1: billingAddressData.streetAddress,
          address2: billingAddressData.extendedAddress || '',
          city: billingAddressData.locality,
          postalCode: billingAddressData.postalCode,
          stateCode: billingAddressData.stateCode,
          country: billingAddressData.countryCodeAlpha2,
          email: billingAddressData.email,
          phone: billingAddressData.phone,
          paymentMethod: config.paymentMethodName
        });
        googlepayCheckoutFormData.append(csrfToken.name, csrfToken.value);
        googlepayCheckoutFormData.append('braintreeGooglePayNonce', googlepayNonce);
        googlepayCheckoutFormData.append('braintreeGooglePayDeviceData', deviceData);
        googlepayCheckoutFormData.append('braintreeGooglePayCardDescription', googlepayCardDescription);
        googlepayCheckoutFormData.append('braintreeGooglepayPaymentType', googlepayPaymentType);
        googlepayCheckoutFormData.append('braintreeSaveGooglepayAccount', true);
        googlepayCheckoutFormData.append('braintreeGooglePayShippingAddress', JSON.stringify(shippingAddressData) || '{}');
        $.ajax({
          type: 'POST',
          url: checkoutFromCartUrl,
          data: googlepayCheckoutFormData,
          contentType: false,
          processData: false,
          success: function success(res) {
            if (res.error) {
              var errorMessage = '';

              if (res.fieldErrors.length) {
                res.fieldErrors.forEach(function (error, index) {
                  var keys = Object.keys(error);

                  if (keys.length) {
                    errorMessage += "".concat(keys[index].replace('dwfrm_billing_', '').replace('_', ' '), " ").concat(res.fieldErrors[index][keys[index]], ". ");
                  }
                });
                showCartErrorMsg(errorMessage);
              }

              if (res.serverErrors.length) {
                res.serverErrors.forEach(function (error) {
                  errorMessage += "".concat(error, ". ");
                });
                showCartErrorMsg(errorMessage);
              }

              if (res.cartError) {
                window.location.href = res.redirectUrl;
              }

              return;
            }

            sessionStorage.setItem('pageState', 'cart');
            googlepayIns.loader.hide();
            window.location.href = placeOrderUrl;
          },
          error: function error(err) {
            if (err && err.redirectUrl) {
              window.location.href = err.redirectUrl;
            }
          }
        });
        return;
      }

      $googlepayNonce.value = googlepayNonce;
      $googlepayCardDescription.value = googlepayCardDescription;
      $braintreeGooglepayPaymentType.value = googlepayPaymentType; // Updating Storefront Billing Form data with GooglePay Billing

      var storeFrontBillingData = JSON.parse(document.querySelector('.braintree-billing-payment-wrap').getAttribute('data-billing-form-fields-names'));
      storeFrontBillingData.dwfrm_billing_addressFields_firstName = billingAddressData.firstName;
      storeFrontBillingData.dwfrm_billing_addressFields_lastName = billingAddressData.lastName;
      storeFrontBillingData.dwfrm_billing_addressFields_address1 = billingAddressData.streetAddress;
      storeFrontBillingData.dwfrm_billing_addressFields_address2 = billingAddressData.extendedAddress || '';
      storeFrontBillingData.dwfrm_billing_addressFields_city = billingAddressData.locality;
      storeFrontBillingData.dwfrm_billing_addressFields_postalCode = billingAddressData.postalCode;
      storeFrontBillingData.dwfrm_billing_addressFields_states_stateCode = billingAddressData.stateCode;
      storeFrontBillingData.dwfrm_billing_addressFields_country = billingAddressData.countryCodeAlpha2;
      storeFrontBillingData.dwfrm_billing_contactInfoFields_email = billingAddressData.email;
      storeFrontBillingData.dwfrm_billing_contactInfoFields_phone = billingAddressData.phone;
      $googlePayBillingAddress.value = JSON.stringify(billingAddressData);
      updateBillingFormValues(storeFrontBillingData);
    } // selector "new GooglePay account" in dropdown list


    var newGPAccount = document.getElementById('newGPAccount');
    var sessionGPAccount = document.querySelector('#sessionGPAccount'); // Selecting Google Pay Session Account

    sessionGPAccount.text = $googlepayCardDescription.value;
    newGPAccount.removeAttribute('selected');
    sessionGPAccount.selected = true;
    sessionGPAccount.setAttribute('data-session-account', 'true');
    showGooglepayAccount();
    continueButton.click();
  };

  googlepayIns = googlepay.init(config, $googlepayButton);
  googlepayIns.createGooglepay();

  function googlepayUpdateAmount() {
    // eslint-disable-line require-jsdoc
    googlepayIns.loader.show();
    $.ajax({
      url: config.getOrderInfoUrl,
      type: 'get',
      dataType: 'json',
      success: function success(data) {
        googlepayIns.loader.hide();
        googlepayIns.updateAmount(data.amount);
      },
      error: function error() {
        window.location.reload();
      }
    });
  }

  $('body').on('checkout:updateCheckoutView', googlepayUpdateAmount);
  $('body').on('braintree:updateCartTotals', googlepayUpdateAmount);
  googlepayUpdateAmount();
}

module.exports = {
  makeGooglepayPayment: makeGooglepayPayment
};

/***/ }),

/***/ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/helper.js":
/*!***************************************************************************************!*\
  !*** ./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/helper.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var $continueButton = document.querySelector('button.submit-payment');

function initWathcherCartUpdate() {
  var $grantTotal = document.querySelector('.grand-total');

  if ($grantTotal) {
    var currentGrantTotalValue = $grantTotal.textContent;
    $('body').on('cart:update', function () {
      var newGrantTotalValue = $grantTotal.textContent;

      if (newGrantTotalValue !== '' && newGrantTotalValue !== currentGrantTotalValue) {
        currentGrantTotalValue = newGrantTotalValue;
        var updateCartTotals = document.createEvent('Event');
        updateCartTotals.initEvent('updateCartTotals', true, true);
        document.querySelector('body').addEventListener('updateCartTotals', function () {
          'braintree:updateCartTotals';
        }, false);
        document.querySelector('body').dispatchEvent(updateCartTotals);
      }
    });
  }
}

function continueButtonToggle(flag) {
  var stage = window.location.hash.substring(1);

  if (stage === 'placeOrder' || stage === 'shipping' || stage === null || stage === '') {
    return;
  }

  if (flag) {
    $continueButton.style.display = 'none';
  } else {
    $continueButton.style.display = '';
  }
}

function paymentMethodChangeHandle(currentTab) {
  document.querySelectorAll('.payment-options[role=tablist] a[data-toggle="tab"]').forEach(function (el) {
    var $tabContent = document.querySelector(el.getAttribute('href'));

    if (el === currentTab) {
      $tabContent.querySelectorAll('input, textarea, select').forEach(function (tab) {
        tab.removeAttribute('disabled', 'disabled');
      });
      $tabContent.querySelectorAll('select.no-disable').forEach(function (tab) {
        tab.setAttribute('disabled', 'disabled');
      });
      continueButtonToggle(JSON.parse($tabContent.getAttribute('data-paypal-is-hide-continue-button')));
    } else {
      $tabContent.querySelectorAll('input, textarea, select').forEach(function (tab) {
        tab.setAttribute('disabled', 'disabled');
      });
    }
  });
}

function getPaymentMethodToLowerCase(paymentMethodName) {
  var paymentMethod = paymentMethodName.split('_');

  if (paymentMethod.length === 1) {
    return paymentMethodName;
  }

  paymentMethod.forEach(function (element, index) {
    paymentMethod[index] = element.charAt(0) + element.slice(1).toLocaleLowerCase();
  });
  return paymentMethod[1] ? paymentMethod[0] + ' ' + paymentMethod[1] : paymentMethod[0];
}

function updateCheckoutView(e, data) {
  var $paymentSummary = document.querySelector('.summary-details .braintree-payment-details');
  var htmlToAppend = '';
  var order = data.order;

  if (order.billing.payment && order.billing.payment.selectedPaymentInstruments && order.billing.payment.selectedPaymentInstruments.length > 0) {
    htmlToAppend += '<div>' + getPaymentMethodToLowerCase(order.billing.payment.selectedPaymentInstruments[0].paymentMethod) + '</div>';

    if (order.billing.payment.selectedPaymentInstruments[0].maskedCreditCardNumber) {
      htmlToAppend += '<div>' + order.billing.payment.selectedPaymentInstruments[0].maskedCreditCardNumber + '</div>';
    }

    if (order.billing.payment.selectedPaymentInstruments[0].paymentMethod === 'PayPal') {
      htmlToAppend += '<div>' + order.billing.payment.selectedPaymentInstruments[0].braintreePaypalEmail + '</div>';
    }

    if (order.billing.payment.selectedPaymentInstruments[0].paymentMethod === 'Venmo') {
      htmlToAppend += '<div>' + order.billing.payment.selectedPaymentInstruments[0].braintreeVenmoUserId + '</div>';
    }

    if (order.billing.payment.selectedPaymentInstruments[0].type) {
      htmlToAppend += '<div>' + order.billing.payment.selectedPaymentInstruments[0].type + '</div>';
    }

    htmlToAppend += '<div>' + order.priceTotal.charAt(0) + order.billing.payment.selectedPaymentInstruments[0].amount + '</div>';
  }

  if ($paymentSummary) {
    $paymentSummary.innerHTML = htmlToAppend;
  }
}

function isValidInputField(field) {
  if (!field.checkValidity()) {
    if (!field.classList.contains('is-invalid')) {
      field.classList.add('is-invalid');
    }

    return false;
  }

  if (field.checkValidity() && field.classList.contains('is-invalid')) {
    field.classList.remove('is-invalid');
  }

  return true;
}
/*
    Adding *active* line to the tab-content class in a case if it isn't already active
    Use case: customer checkout from cart (page) and
    (under the place Order page) hit the 'edit' button
**/


function updatePaymentMethodTab() {
  var paymentMethodName = document.querySelectorAll('[data-braintree-payment-method]')[0].dataset.braintreePaymentMethod;
  var content = document.querySelector(".js_braintree_".concat(paymentMethodName.toLowerCase(), "Content")).classList.contains('active');

  if (!content) {
    document.querySelectorAll("[data-method-id=".concat(paymentMethodName, "]"))[0].children[0].click();
  }
}
/**
 * Gets Billing Address Form Values
 *
 * @returns {Object} with Billing Address
 */


function getBillingAddressFormValues() {
  return $('#dwfrm_billing').serialize().split('&').map(function (el) {
    return el.split('=');
  }).reduce(function (accumulator, item) {
    var elem = item[0].lastIndexOf('_');

    if (elem < 0) {
      accumulator[item[0]] = item[1];
    } else {
      elem = item[0].substring(elem + 1);
      accumulator[elem] = item[1];
    }

    return accumulator;
  }, {});
}
/**
 * Gets Nonce depending on payment method name
 *
 * @param {string} paymentMethodName - payment method name
 * @returns {boolean} nonce exist
 */


function isNonceExist(paymentMethodName) {
  var $nonce = document.querySelector("#braintree".concat(paymentMethodName, "Nonce"));
  if (!$nonce) return false;
  var nonceValue = $nonce.value;
  var $tab = document.querySelector(".".concat(paymentMethodName.toLowerCase(), "-tab"));
  var isActiveTab;

  if ($tab) {
    isActiveTab = $tab.classList.contains('active');
  }

  return !isActiveTab && nonceValue;
}

var loaderInstance = __webpack_require__(/*! ./loaderHelper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/loaderHelper.js");

var accountsLoader;

function removeBtPayment(e) {
  var target = e.target;
  var $loaderContainter = document.querySelector('#' + target.getAttribute('data-loader'));
  accountsLoader = loaderInstance($loaderContainter);
  accountsLoader.show();
  $.get(target.getAttribute('data-url') + '?UUID=' + target.getAttribute('data-id')).then(function (data) {
    $('#uuid-' + data.UUID).remove();

    if (data.newDefaultAccount) {
      document.querySelector('#uuid-' + data.newDefaultAccount + ' span').style.fontWeight = 'bold';
      document.querySelector('#uuid-' + data.newDefaultAccount + ' button.braintree-make-default-card').style.display = 'none';
    }

    accountsLoader.hide();
  }).fail(function () {
    location.reload();
    accountsLoader.hide();
  });
}
/**
 * Create formData from fields data
 *
 * @param {Object} paymentFields - fields data values
 * @param {Object} fieldsData - fields data values
 * @returns {Object} cart billing form data
 */


function createPaymentFormData(paymentFields, fieldsData) {
  var paymentFieldsParsed = JSON.parse(paymentFields);
  return Object.entries(paymentFieldsParsed).reduce(function (formData, entry) {
    var _entry = _slicedToArray(entry, 2),
        key = _entry[0],
        field = _entry[1];

    if (_typeof(field) === 'object') {
      formData.append(field.name, fieldsData && fieldsData[key] !== null ? fieldsData[key] : field.value);
    }

    return formData;
  }, new FormData());
}

function setDefaultProperty(params) {
  return $.get(params.url + '?UUID=' + params.id + '&pmID=' + params.paymentMethodID).then(function (data) {
    document.querySelector('#uuid-' + data.newDefaultProperty + ' span').style.fontWeight = 'bold';
    document.querySelector('.braintree-make-default-card.uuid-' + data.newDefaultProperty).style.display = 'none';
    document.querySelector('#uuid-' + data.toRemoveDefaultProperty + ' span').style.fontWeight = 'normal';
    document.querySelector('.braintree-make-default-card.uuid-' + data.toRemoveDefaultProperty).style.display = 'inline';
    params.loader.hide();
  }).fail(function () {
    params.loader.hide();
  });
}

function initCardEvents() {
  if (document.querySelector('.braintreeAddNewCard')) {
    document.querySelector('.braintreeAddNewCard').addEventListener('click', function () {
      document.querySelector('.braintreeAddNewCard').style.display = 'none';
      document.querySelector('.braintreeAddNewCardBlock').style.display = 'block';
    });
  }

  document.querySelector('.creditCard-accounts').onclick = function (e) {
    if (e.target.classList.contains('remove-bt-payment')) {
      removeBtPayment(e);
    } else if (e.target.classList.contains('braintree-make-default-card')) {
      var target = e.target;
      var url = target.getAttribute('data-make-default-url');
      var id = target.getAttribute('data-id');
      var paymentMethodID = 'CARD';
      var $loaderContainter = document.querySelector('#' + target.getAttribute('data-loader'));
      var loader = loaderInstance($loaderContainter);
      loader.show();
      setDefaultProperty({
        url: url,
        id: id,
        paymentMethodID: paymentMethodID,
        loader: loader
      });
    }
  };
}
/**
 * Checks authenticated customer, account list for default Payment Method
 *
 * @param {string} selector - querySelector
 * @returns {Object} default data attribute or null
 */


function getOptionByDataDefault(selector) {
  if (!document.querySelector(selector)) {
    return null;
  }

  return Array.apply(null, document.querySelector(selector).options).find(function (el) {
    return el.getAttribute('data-default') ? JSON.parse(el.getAttribute('data-default')) : null;
  });
}
/**
 * Checks authenticated customer, account list for session Account
 *
 * @param {Object} params - querySelector + el.id
 * @returns {Object} session account object
 */


function getSessionAccountOption(params) {
  return Array.apply(null, document.querySelector(params.querySelector).options).find(function (el) {
    return el.id === params.id && JSON.parse(el.getAttribute('data-session-account'));
  });
}
/**
 * Remove Session Active Payment Method
 ** Use helpers to add more Payment Methods
 *
 * @returns {function}function call
 */


function removeActiveSessionPayment() {
  var activePaymentMethods = [];
  document.querySelectorAll('.payment-options[role=tablist] li').forEach(function (el) {
    if (el.dataset.methodId === 'CREDIT_CARD') {
      el.dataset.methodId = 'CreditCard';
    }

    activePaymentMethods.push(el.dataset.methodId);
  });
  var helpers = {
    PayPal: __webpack_require__(/*! ./paypal/paypalHelper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/paypal/paypalHelper.js"),
    Venmo: __webpack_require__(/*! ./venmo/venmoHelper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/venmo/venmoHelper.js"),
    GooglePay: __webpack_require__(/*! ./googlepay/googlepayHelper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/googlepay/googlepayHelper.js"),
    CreditCard: __webpack_require__(/*! ./creditcard/creditcardHelper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/creditcard/creditcardHelper.js"),
    SRC: __webpack_require__(/*! ./src/srcHelper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/src/srcHelper.js"),
    ApplePay: __webpack_require__(/*! ./applepay/applepayHelper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/applepay/applepayHelper.js")
  };
  var activePM = activePaymentMethods.find(function (el) {
    return isNonceExist(el);
  });

  if (activePM) {
    return helpers[activePM].removeSessionNonce();
  }
}

function showCartErrorMsg(message) {
  $('.checkout-btn').addClass('disabled');
  $('.cart-error').append("<div class=\"alert alert-danger alert-dismissible valid-cart-error fade show cartError\" role=\"alert\">\n            <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n                <span aria-hidden=\"true\">&times;</span>\n            </button>\n            ".concat(message, "\n        </div>"));
  window.scrollTo(0, 0);
}
/**
 * Update Checkout Billing form values
 *
 * @param {Object} billingData - fields data values
 */


function updateBillingFormValues(billingData) {
  var $billingFormFields = document.querySelectorAll('.billing-address select, .billing-address input, .contact-info-block input');
  $billingFormFields.forEach(function (el) {
    if (billingData[el.name]) {
      el.value = billingData[el.name];
    }
  });
}

module.exports = {
  initWathcherCartUpdate: initWathcherCartUpdate,
  paymentMethodChangeHandle: paymentMethodChangeHandle,
  continueButtonToggle: continueButtonToggle,
  updateCheckoutView: updateCheckoutView,
  isValidInputField: isValidInputField,
  updatePaymentMethodTab: updatePaymentMethodTab,
  getBillingAddressFormValues: getBillingAddressFormValues,
  removeBtPayment: removeBtPayment,
  createPaymentFormData: createPaymentFormData,
  initCardEvents: initCardEvents,
  isNonceExist: isNonceExist,
  setDefaultProperty: setDefaultProperty,
  getOptionByDataDefault: getOptionByDataDefault,
  removeActiveSessionPayment: removeActiveSessionPayment,
  getSessionAccountOption: getSessionAccountOption,
  showCartErrorMsg: showCartErrorMsg,
  updateBillingFormValues: updateBillingFormValues
};

/***/ }),

/***/ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/loaderHelper.js":
/*!*********************************************************************************************!*\
  !*** ./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/loaderHelper.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (containerElement) {
  if (!containerElement) {
    // eslint-disable-next-line no-console
    console.error('Braintree: No container for showing loaders');
  }

  function Constructor() {
    this.containerEl = containerElement;
  }

  Constructor.prototype.show = function () {
    this.containerEl.style.display = 'block';
  };

  Constructor.prototype.hide = function () {
    this.containerEl.style.display = 'none';
  };

  return new Constructor();
};

/***/ }),

/***/ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/local/localPayment.js":
/*!***************************************************************************************************!*\
  !*** ./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/local/localPayment.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var braintreeLocal = __webpack_require__(/*! ../braintreeLocal */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeLocal.js");

var $lpmButton = document.querySelectorAll('.lpmButton');
$lpmButton.forEach(function (el) {
  var $btn = el;
  var config = JSON.parse($btn.getAttribute('data-braintree-config'));
  var localIns = braintreeLocal.init(config, $btn);
  localIns.createLocalPayment();

  function updateAmountData() {
    // eslint-disable-line require-jsdoc
    $.ajax({
      url: config.getOrderInfoUrl,
      type: 'get',
      dataType: 'json',
      success: function success(data) {
        localIns.updateAmount(data.amount);
      },
      error: function error() {
        window.location.reload();
      }
    });
  }

  $('body').on('checkout:updateCheckoutView', updateAmountData);
});

/***/ }),

/***/ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/paypal/minicartHelper.js":
/*!******************************************************************************************************!*\
  !*** ./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/paypal/minicartHelper.js ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var paypalHelper = __webpack_require__(/*! ./paypalHelper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/paypal/paypalHelper.js");

var payPal = __webpack_require__(/*! ../braintreePaypal */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreePaypal.js");

var paypalSavedAccountHandler = __webpack_require__(/*! ./paypalSavedAccountHandler */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/paypal/paypalSavedAccountHandler.js");

var helper = __webpack_require__(/*! ../helper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/helper.js");

var $paypalMinicartButton;

function miniCartButton() {
  document.querySelectorAll('.js_braintree_paypal_cart_button').forEach(function (el) {
    var $btn = el;

    if (JSON.parse($btn.getAttribute('data-is-inited'))) {
      return;
    }

    var config = JSON.parse($btn.getAttribute('data-braintree-config'));

    if (_typeof(config) !== 'object' || config === null) {
      // eslint-disable-next-line no-console
      console.error(el, 'not valid data-braintree-config');
      return;
    }

    $paypalMinicartButton = document.querySelector('.paypalMinicartButton');

    if ($paypalMinicartButton && config.options.amount === 0) {
      $paypalMinicartButton.style.display = 'none';
    }

    config.paypalConfig = config.paypalConfig || {};

    config.onTokenizePayment = function (payload, btnInstance) {
      var that = btnInstance;
      var params = btnInstance.params;
      var paypalCheckoutFormFields = document.querySelector('.braintree-cart-paypal-buttons-wrap').getAttribute('data-paypal-checkout-form-fields');
      var details = payload.details;

      if (!details.billingAddress) {
        /*that.er.show('Merchant PayPal account does not support the Billing Address retrieving. Contact PayPal for details on eligibility and enabling this feature.');
        return;*/
        details.billingAddress = details.shippingAddress;
      }

      var billingAddressData = paypalHelper.createBillingAddressData(details.billingAddress, details);
      var paypalCheckoutFormData = helper.createPaymentFormData(paypalCheckoutFormFields, {
        firstName: billingAddressData.firstName,
        lastName: billingAddressData.lastName,
        address1: billingAddressData.streetAddress,
        address2: billingAddressData.extendedAddress || '',
        city: billingAddressData.locality,
        postalCode: billingAddressData.postalCode,
        stateCode: billingAddressData.state,
        country: billingAddressData.countryCodeAlpha2,
        email: billingAddressData.email,
        phone: billingAddressData.phone,
        paymentMethod: params.paymentMethodName
      });
      var csrfToken = document.querySelector('.braintree-cart-paypal-buttons-wrap #csrf_token');
      paypalCheckoutFormData.append(csrfToken.name, csrfToken.value);
      paypalCheckoutFormData.append('braintreePaypalNonce', payload.nonce);
      paypalCheckoutFormData.append('braintreePaypalRiskData', (params || {}).riskData);
      paypalCheckoutFormData.append('braintreeSavePaypalAccount', true);
      paypalCheckoutFormData.append('braintreePaypalShippingAddress', details.shippingAddress ? paypalHelper.createShippingAddressData(details.shippingAddress, details) : '{}');
      paypalCheckoutFormData.append('braintreePaypalBillingAddress', JSON.stringify(billingAddressData));
      $.ajax({
        type: 'POST',
        url: params.paypalHandle,
        data: paypalCheckoutFormData,
        contentType: false,
        processData: false,
        success: function success(data) {
          if (data.error) {
            var errorMessage = '';

            if (data.fieldErrors.length) {
              data.fieldErrors.forEach(function (error, index) {
                var keys = Object.keys(error);

                if (keys.length) {
                  errorMessage += "".concat(keys[index].replace('dwfrm_billing_', '').replace('_', ' '), " ").concat(data.fieldErrors[index][keys[index]], ". ");
                }
              });
              helper.showCartErrorMsg(errorMessage);
            }

            if (data.serverErrors.length) {
              data.serverErrors.forEach(function (error) {
                errorMessage += "".concat(error, ". ");
              });
              helper.showCartErrorMsg(errorMessage);
            }

            if (data.cartError) {
              window.location.href = data.redirectUrl;
            }

            return;
          }

          window.location.href = params.redirectUrl;
        },
        error: function error(err) {
          if (err && err.redirectUrl) {
            window.location.href = err.redirectUrl;
          }
        }
      });
    };

    var paypalIns = payPal.init(config, $btn);

    function updateCartPaypalAmount() {
      // eslint-disable-line require-jsdoc
      paypalIns.loader.show();
      $.ajax({
        url: config.getOrderInfoUrl,
        type: 'get',
        dataType: 'json',
        success: function success(data) {
          paypalIns.loader.hide();
          paypalIns.updateAmount(data.amount);
        },
        error: function error() {
          window.location.reload();
        }
      });
    }

    $('body').on('cart:update', function () {
      $paypalMinicartButton = document.querySelector('.paypalMinicartButton');
      var $totalPrice = document.querySelector('.sub-total');

      if ($paypalMinicartButton && $totalPrice) {
        var isZeroAmount = $totalPrice.innerHTML.substring(1) === '0.00';
        $paypalMinicartButton.style.display = isZeroAmount ? 'none' : '';
      }
    });
    $('body').on('braintree:updateCartTotals', updateCartPaypalAmount);
    $btn.setAttribute('data-is-inited', true);
  });
}

var observer = new MutationObserver(function (mutations) {
  mutations.forEach(function (mutation) {
    if (mutation.addedNodes.length < 2) {
      return;
    }

    miniCartButton();
    var $staticPaypalButton = document.querySelector('.braintree-static-paypal-button');

    if ($staticPaypalButton) {
      $staticPaypalButton.addEventListener('click', paypalSavedAccountHandler.staticImageHandler);
    }
  });
});
window.miniCartButton = miniCartButton;
module.exports = {
  miniCartButton: miniCartButton,
  observer: observer
};

/***/ }),

/***/ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/paypal/paypalAccount.js":
/*!*****************************************************************************************************!*\
  !*** ./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/paypal/paypalAccount.js ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var payPal = __webpack_require__(/*! ../braintreePaypal */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreePaypal.js");

var paypalHelper = __webpack_require__(/*! ./paypalHelper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/paypal/paypalHelper.js");

var helper = __webpack_require__(/*! ../helper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/helper.js");

var loaderInstance = __webpack_require__(/*! ../loaderHelper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/loaderHelper.js");

var accountsLoader;

function initAddPaypalAccount() {
  var $btn = document.querySelector('.js_braintree_accountPaypalButton');
  var $paypalErrorContainer = document.querySelector('#paypalAccountErrorContainer');
  var $paypalLoader = document.querySelector('#braintreePayPalAccLoader');

  if (JSON.parse($btn.getAttribute('data-is-inited'))) {
    return;
  }

  var config = JSON.parse($btn.getAttribute('data-braintree-config'));

  if (_typeof(config) !== 'object' || config === null) {
    // eslint-disable-next-line no-console
    console.error($btn, 'not valid data-braintree-config');
    return;
  }

  config.$loaderContainer = $paypalLoader;
  config.$errorContainer = $paypalErrorContainer;

  config.onTokenizePayment = function (data) {
    var accountPaypalButton = document.querySelector('.js_braintree_accountPaypalButton');
    var paypalAddAccountHandler = accountPaypalButton.getAttribute('data-paypal-add-account-handler');
    var paypalAccountFormFields = accountPaypalButton.getAttribute('data-paypal-account-form-fields');
    var paypalBillingAddressData = paypalHelper.createBillingAddressData(data.details.billingAddress, data.details);
    var paypalAccountFormData = helper.createPaymentFormData(paypalAccountFormFields, {
      nonce: data.nonce,
      email: data.details.email,
      addresses: JSON.stringify(paypalBillingAddressData),
      shippingAddress: JSON.stringify(data.details.shippingAddress)
    });
    var csrfToken = document.querySelector('.js_braintree_accountPaypalButton_wrapper #csrf_token');
    paypalAccountFormData.append(csrfToken.name, csrfToken.value);
    var $loaderContainter = document.querySelector('#paypalAccountBtLoader');
    accountsLoader = loaderInstance($loaderContainter);
    accountsLoader.show();
    return $.ajax({
      type: 'POST',
      url: paypalAddAccountHandler,
      data: paypalAccountFormData,
      contentType: false,
      processData: false
    }).then(function (paymentData) {
      paypalHelper.hidePaypalAccountBtn();
      $paypalLoader.style.display = 'none';
      $paypalErrorContainer.textContent = '';
      $paypalErrorContainer.style.display = 'none';
      $.get(paymentData.renderAccountsUrl).then(function (tplData) {
        accountsLoader.hide();
        document.querySelector('.paypal-accounts').innerHTML = tplData;
        document.querySelectorAll('.paypal-accounts .remove-bt-payment').forEach(function (el) {
          el.addEventListener('click', helper.removeBtPayment);
        });
      });
    }).fail(function (_ref) {
      var responseJSON = _ref.responseJSON;
      accountsLoader.hide();
      $paypalLoader.style.display = 'none';
      $paypalErrorContainer.style.display = 'block';
      $paypalErrorContainer.textContent = responseJSON.error;
    });
  };

  payPal.init(config, $btn);
  $btn.setAttribute('data-is-inited', true);
}

function initPayPalEvents() {
  document.querySelector('.add-paypal-account').addEventListener('click', function () {
    paypalHelper.showPaypalAccountBtn();
    initAddPaypalAccount();
  });
}

function initPaypalButtonsEvents() {
  document.querySelector('.paypal-accounts').onclick = function (e) {
    if (e.target.classList.contains('remove-bt-payment')) {
      helper.removeBtPayment(e);
    } else if (e.target.classList.contains('braintree-make-default-card')) {
      var target = e.target;
      var url = target.getAttribute('data-make-default-url');
      var id = target.getAttribute('data-id');
      var paymentMethodID = document.querySelector('.paypal-accounts').getAttribute('data-payment-method-id');
      var $loaderContainter = document.querySelector('#' + target.getAttribute('data-loader'));
      var loader = loaderInstance($loaderContainter);
      loader.show();
      helper.setDefaultProperty({
        url: url,
        id: id,
        paymentMethodID: paymentMethodID,
        loader: loader
      });
    }
  };
}

module.exports = {
  initPayPalEvents: initPayPalEvents,
  initAddPaypalAccount: initAddPaypalAccount,
  initPaypalButtonsEvents: initPaypalButtonsEvents
};

/***/ }),

/***/ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/paypal/paypalHelper.js":
/*!****************************************************************************************************!*\
  !*** ./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/paypal/paypalHelper.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var helper = __webpack_require__(/*! ../helper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/helper.js");

var $addPaypalAccountBtn = document.querySelector('.add-paypal-account');
var $paypalAccountWrapper = document.querySelector('.js_braintree_accountPaypalButton_wrapper');
var $savePaypalAccountCountainer = document.querySelector('#braintreeSavePaypalAccountContainer');
var $savePaypalAccountCheckbox = document.querySelector('#braintreeSavePaypalAccount');
var $braintreePayPalNonce = document.querySelector('#braintreePayPalNonce');
var $continueButton = document.querySelector('.submit-payment');

var formValidationConrol = function formValidationConrol(validateActions) {
  var isFormValid = true;

  if (isFormValid) {
    validateActions.enable();
  } else {
    validateActions.disable();
  }
};

function getOptionByEmail() {
  var sessionEmail = document.getElementById('braintreePaypalAccount').value || null;
  return Array.apply(null, document.querySelector('#braintreePaypalAccountsList').options).find(function (el) {
    return el.getAttribute('data-id') && sessionEmail && sessionEmail === el.text;
  });
}

function setSessionAccountOptionDefault() {
  var savedDefaultOption = helper.getOptionByDataDefault('#braintreePaypalAccountsList');
  if (!savedDefaultOption) return;
  savedDefaultOption.selected = '';
  helper.getSessionAccountOption({
    querySelector: '#braintreePaypalAccountsList',
    id: 'braintreePaypalAccount'
  }).selected = 'selected';
}
/*
    Check if paypal method was used and change appearance of paypal tab
**/


function removeSessionNonce() {
  var sessionOption = helper.getSessionAccountOption({
    querySelector: '#braintreePaypalAccountsList',
    id: 'braintreePaypalAccount'
  });

  if (sessionOption) {
    var $paypalContent = document.querySelector('.js_braintree_paypalContent');
    document.querySelector('#braintreePayPalNonce').value = '';
    document.querySelector('#braintreePaypalAccount').selected = false;
    sessionOption.classList.add('used-paypal-account-hide');
    sessionOption.classList.remove('used-paypal-account');
    sessionOption.value = '';
    sessionOption.text = '';
    sessionOption.setAttribute('data-session-account', false);
    sessionOption.setAttribute('data-save', false);
    var defaultOption = helper.getOptionByDataDefault('#braintreePaypalAccountsList');

    if (defaultOption) {
      defaultOption.selected = true;
      document.querySelector('#braintreeSavePaypalAccountContainer').style.display = 'none';
      document.querySelector('.js_braintree_paypal_billing_button').style.display = 'none';
      $paypalContent.setAttribute('data-paypal-is-hide-continue-button', false);
    } else {
      $paypalContent.setAttribute('data-paypal-is-hide-continue-button', true);
      document.querySelector('.js_braintree_paypal_billing_button').style.display = 'block';
      var paypalAccount = document.querySelector('.form-group.braintree_used_paypal_account');
      paypalAccount.classList.remove('used-paypal-account');
      paypalAccount.classList.add('used-paypal-account-hide');
    }

    [].forEach.call(document.querySelector('#braintreePaypalAccountsList'), function (el) {
      if (el.style.display === 'none') el.style.display = 'block';
    });
  }
}

function initAccountListAndSaveFunctionality() {
  var $accountsList = document.querySelector('#braintreePaypalAccountsList');
  var $alertInfo = document.getElementById('paypal-content').querySelectorAll('.alert-info')[0];

  function accountsListChange() {
    // eslint-disable-line require-jsdoc
    var isSameSessionAccount = getOptionByEmail();
    $continueButton.removeEventListener('click', removeSessionNonce);

    if ($accountsList.value === 'newaccount') {
      $alertInfo.style.display = 'block';

      if ($savePaypalAccountCountainer) {
        $savePaypalAccountCountainer.style.display = 'block';
        $savePaypalAccountCheckbox.checked = true;
      }
    } else if ($accountsList.selectedOptions[0].id === 'braintreePaypalAccount') {
      // Case when Session Email already saved under account
      $braintreePayPalNonce.value = $accountsList.selectedOptions[0].getAttribute('data-nonce');

      if (isSameSessionAccount) {
        $savePaypalAccountCountainer.style.display = 'none';
        $savePaypalAccountCheckbox.checked = false;
      } else if ($savePaypalAccountCountainer) {
        $savePaypalAccountCountainer.style.display = 'block';
        $savePaypalAccountCheckbox.checked = JSON.parse(document.querySelector('#braintreePaypalAccount').getAttribute('data-save'));
      }
    } else {
      $continueButton.addEventListener('click', removeSessionNonce);
      $braintreePayPalNonce.value = '';
      $alertInfo.style.display = 'none';

      if ($savePaypalAccountCountainer) {
        $savePaypalAccountCheckbox.checked = false;
        $savePaypalAccountCountainer.style.display = 'none';
      }
    }
  }

  if ($accountsList) {
    $accountsList.addEventListener('change', accountsListChange);
    accountsListChange();
  }
}

function createShippingAddressData(inpShippingAddress, details) {
  var shippingAddress = inpShippingAddress;

  if (!shippingAddress.recipientName) {
    shippingAddress.firstName = details.firstName;
    shippingAddress.lastName = details.lastName;
    shippingAddress.recipientName = details.firstName + ' ' + details.lastName;
  }

  shippingAddress.email = details.email;
  shippingAddress.phone = details.phone;
  shippingAddress.countryCodeAlpha2 = shippingAddress.countryCode;
  shippingAddress.streetAddress = shippingAddress.line1;
  shippingAddress.extendedAddress = shippingAddress.line2;
  shippingAddress.locality = shippingAddress.city;
  shippingAddress.region = shippingAddress.state;
  shippingAddress.postalCode = shippingAddress.postalCode;
  return JSON.stringify(shippingAddress);
}

function createBillingAddressData(inpBillingAddress, details) {
  var billingAddress = inpBillingAddress;
  billingAddress.firstName = details.firstName;
  billingAddress.lastName = details.lastName;
  billingAddress.email = details.email;
  billingAddress.phone = details.phone;
  billingAddress.countryCodeAlpha2 = billingAddress.countryCode;
  billingAddress.streetAddress = billingAddress.line1;
  billingAddress.extendedAddress = billingAddress.line2;
  billingAddress.locality = billingAddress.city;
  billingAddress.region = billingAddress.state;
  return billingAddress;
}

function appendToUrl(url, param) {
  var newUrl = url;
  newUrl += (newUrl.indexOf('?') !== -1 ? '&' : '?') + Object.keys(param).map(function (key) {
    return key + '=' + encodeURIComponent(param[key]);
  }).join('&');
  return newUrl;
}

function showPayPalAccount(braintreePaypalEmail, braintreePaypalNonce) {
  var braintreePaypalAccount = document.getElementById('braintreePaypalAccount');
  var paypalAccount = document.querySelector('.form-group.braintree_used_paypal_account');
  var $paypalContent = document.querySelector('.js_braintree_paypalContent');
  var $braintreePaypalAccountsList = document.getElementById('braintreePaypalAccountsList');
  var customerAuthenticated = JSON.parse($braintreePaypalAccountsList.dataset.customerAuthenticated);

  if (customerAuthenticated || braintreePaypalEmail && braintreePaypalAccount.text !== 'PayPal') {
    if (braintreePaypalNonce && $braintreePaypalAccountsList) {
      return true;
    }

    document.querySelectorAll('.js_braintree_paypalContent .custom-checkbox').forEach(function (el) {
      el.style.display = 'none';
    });
  }

  braintreePaypalAccount.text = braintreePaypalEmail;

  if (!paypalAccount.classList.contains('used-paypal-account')) {
    paypalAccount.classList.remove('used-paypal-account-hide');
    paypalAccount.classList.add('used-paypal-account');
  }

  document.querySelector('.js_braintree_paypal_billing_button').style.display = 'none';
  $paypalContent.setAttribute('data-paypal-is-hide-continue-button', false);
}

function showCheckoutErrorMsg(message) {
  document.querySelector('.error-message-text').textContent = '';
  document.querySelector('.error-message').style.display = 'block';
  document.querySelector('.error-message-text').append(message);
  window.scrollTo(0, 0);
}

function showPDPButton($braintreePDPButton) {
  $braintreePDPButton.style.display = '';
}

function hidePDPButton($braintreePDPButton) {
  $braintreePDPButton.style.display = 'none';
}

function showPaypalAccountBtn() {
  $addPaypalAccountBtn.style.display = 'none';
  $paypalAccountWrapper.style.display = 'block';
}

function hidePaypalAccountBtn() {
  $addPaypalAccountBtn.style.display = 'block';
  $paypalAccountWrapper.style.display = 'none';
}

module.exports = {
  formValidationConrol: formValidationConrol,
  initAccountListAndSaveFunctionality: initAccountListAndSaveFunctionality,
  createShippingAddressData: createShippingAddressData,
  createBillingAddressData: createBillingAddressData,
  appendToUrl: appendToUrl,
  showPayPalAccount: showPayPalAccount,
  showCheckoutErrorMsg: showCheckoutErrorMsg,
  showPDPButton: showPDPButton,
  hidePDPButton: hidePDPButton,
  getOptionByEmail: getOptionByEmail,
  removeSessionNonce: removeSessionNonce,
  setSessionAccountOptionDefault: setSessionAccountOptionDefault,
  showPaypalAccountBtn: showPaypalAccountBtn,
  hidePaypalAccountBtn: hidePaypalAccountBtn
};

/***/ }),

/***/ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/paypal/paypalPayment.js":
/*!*****************************************************************************************************!*\
  !*** ./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/paypal/paypalPayment.js ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var paypalHelper = __webpack_require__(/*! ./paypalHelper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/paypal/paypalHelper.js");

var helper = __webpack_require__(/*! ../helper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/helper.js");

var payPal = __webpack_require__(/*! ../braintreePaypal */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreePaypal.js");

var $paypalContent = document.querySelector('.js_braintree_paypalContent');
var $paypalButton = document.querySelector('.js_braintree_paypal_billing_button');
var $braintreePaypalAccountsList = document.querySelector('#braintreePaypalAccountsList');
var $braintreePaypalNonceInput = document.querySelector('input[name=braintreePaypalNonce]');
var $braintreePaypalEmail = document.querySelector('#braintreePaypalEmail');
var $braintreePaypalNonce = document.querySelector('#braintreePayPalNonce');
var $braintreePaypalBillingAddressInput = document.querySelector('input[name=braintreePaypalBillingAddress]');

function makePaypalPayment(continueButton) {
  var config = JSON.parse($paypalButton.getAttribute('data-braintree-config'));
  var isSessionAccount = helper.getSessionAccountOption({
    querySelector: '#braintreePaypalAccountsList',
    id: 'braintreePaypalAccount'
  });
  var isSameSessionAccount = paypalHelper.getOptionByEmail();

  if (_typeof(config) !== 'object' || config === null) {
    // eslint-disable-next-line no-console
    console.error($paypalButton, 'not valid data-braintree-config');
  }

  function hideShowButtons() {
    if ($braintreePaypalAccountsList.value === 'newaccount') {
      $paypalContent.setAttribute('data-paypal-is-hide-continue-button', true);
      continueButton.style.display = 'none';
      $paypalButton.style.display = '';
    } else {
      $paypalContent.setAttribute('data-paypal-is-hide-continue-button', false);
      continueButton.style.display = '';
      $paypalButton.style.display = 'none';
    }
  }

  if ($braintreePaypalAccountsList) {
    $braintreePaypalAccountsList.addEventListener('change', function () {
      hideShowButtons();
    });
  } // Getting same email option as session email, if any found


  if (JSON.parse($braintreePaypalAccountsList.dataset.customerAuthenticated) && isSessionAccount) {
    if (isSameSessionAccount) {
      isSameSessionAccount.style.display = 'none';

      if (isSessionAccount.classList.contains('used-paypal-account-hide')) {
        isSessionAccount.classList.add('used-paypal-account');
        isSessionAccount.classList.remove('used-paypal-account-hide');
      }
    }

    paypalHelper.setSessionAccountOptionDefault();
  }

  paypalHelper.initAccountListAndSaveFunctionality();

  config.onTokenizePayment = function (data) {
    helper.removeActiveSessionPayment();

    if ($braintreePaypalNonceInput) {
      $braintreePaypalNonceInput.value = data.nonce;
    }

    $braintreePaypalNonce.value = data.nonce;
    document.querySelector('#braintreePaypalAccount').setAttribute('data-session-account', 'true');
    document.querySelector('#braintreePaypalAccount').setAttribute('data-nonce', data.nonce);

    if (data.details) {
      var details = data.details;
      $braintreePaypalEmail.value = data.details.email;
      document.querySelector('#braintreePaypalAccount').value = data.details.email;
      document.querySelector('#braintreePaypalAccount').text = data.details.email;
      helper.continueButtonToggle(false);
      $paypalContent.setAttribute('data-paypal-is-hide-continue-button', false);

      if (details.billingAddress) {
        // Updating Storefront Billing Form data with PayPal Billing
        var paypalBillingData = paypalHelper.createBillingAddressData(details.billingAddress, details);
        var storeFrontBillingData = JSON.parse(document.querySelector('.braintree-billing-payment-wrap').getAttribute('data-billing-form-fields-names'));
        storeFrontBillingData.dwfrm_billing_addressFields_firstName = paypalBillingData.firstName;
        storeFrontBillingData.dwfrm_billing_addressFields_lastName = paypalBillingData.lastName;
        storeFrontBillingData.dwfrm_billing_addressFields_address1 = paypalBillingData.streetAddress;
        storeFrontBillingData.dwfrm_billing_addressFields_address2 = paypalBillingData.extendedAddress || '';
        storeFrontBillingData.dwfrm_billing_addressFields_city = paypalBillingData.locality;
        storeFrontBillingData.dwfrm_billing_addressFields_postalCode = paypalBillingData.postalCode;
        storeFrontBillingData.dwfrm_billing_addressFields_states_stateCode = paypalBillingData.state;
        storeFrontBillingData.dwfrm_billing_addressFields_country = paypalBillingData.countryCodeAlpha2;
        storeFrontBillingData.dwfrm_billing_contactInfoFields_email = paypalBillingData.email;
        storeFrontBillingData.dwfrm_billing_contactInfoFields_phone = paypalBillingData.phone;
        $braintreePaypalBillingAddressInput.value = JSON.stringify(paypalBillingData);
        helper.updateBillingFormValues(storeFrontBillingData);
      }

      if ($braintreePaypalAccountsList && $braintreePaypalAccountsList.value === 'newaccount') {
        document.querySelector('.js_braintree_paypal_billing_button').style.display = 'none';
        var paypalAccount = document.querySelector('.form-group.braintree_used_paypal_account');
        var sessionAccount = document.querySelector('#braintreePaypalAccount');

        if (!paypalAccount.classList.contains('used-paypal-account')) {
          paypalAccount.classList.remove('used-paypal-account-hide');
          paypalAccount.classList.add('used-paypal-account');
          sessionAccount.classList.remove('used-paypal-account-hide');
          sessionAccount.classList.add('used-paypal-account');
        } else {
          sessionAccount.classList.remove('used-paypal-account-hide');
          sessionAccount.classList.add('used-paypal-account');
        }
      }
    }

    var newPPAccount = document.getElementById('newPPAccount');

    if (newPPAccount.selected) {
      newPPAccount.removeAttribute('selected');
      document.querySelector('#braintreePaypalAccount').selected = true;
    } // Getting same email option as session email, if any found


    if (JSON.parse($braintreePaypalAccountsList.dataset.customerAuthenticated) && helper.getSessionAccountOption({
      querySelector: '#braintreePaypalAccountsList',
      id: 'braintreePaypalAccount'
    })) {
      isSameSessionAccount = paypalHelper.getOptionByEmail();
      paypalHelper.setSessionAccountOptionDefault();

      if (isSameSessionAccount) {
        isSameSessionAccount.style.display = 'none';
        document.getElementById('braintreeSavePaypalAccount').value = false;
        document.querySelector('#braintreeSavePaypalAccountContainer').style.display = 'none';
      } else {
        [].forEach.call(document.querySelector('#braintreePaypalAccountsList'), function (el) {
          if (el.style.display === 'none') el.style.display = 'block';
        });
      }
    }

    paypalHelper.showPayPalAccount(data.details.email, data.nonce);
    continueButton.click();
  };

  config.paypalConfig = config.paypalConfig || {};

  config.paypalConfig.validate = function (validateActions) {
    paypalHelper.formValidationConrol(validateActions, true);
  };

  var paypalIns = payPal.init(config, $paypalButton);

  if (document.querySelector('.braintree_used_paypal_account').classList.contains('used-paypal-account')) {
    paypalHelper.showPayPalAccount(document.querySelector('#braintreePaypalEmail').value);
  }

  function updateAmountAndShippingData() {
    // eslint-disable-line require-jsdoc
    paypalIns.loader.show();
    $.ajax({
      url: config.getOrderInfoUrl,
      type: 'get',
      dataType: 'json',
      success: function success(data) {
        var $paypalAddress = document.querySelector('input[name=braintreePaypalShippingAddress]') !== '';
        paypalIns.loader.hide();
        paypalIns.updateAmount(data.amount);
        paypalIns.updateShippingAddress(data.shippingAddress);

        if ($paypalAddress.value) {
          var newPayPalAddress = $.extend({}, JSON.parse($paypalAddress.value), data.shippingAddress);
          $paypalAddress.value = JSON.stringify(newPayPalAddress);
        }
      },
      error: function error() {
        window.location.reload();
      }
    });
  }

  $('body').on('checkout:updateCheckoutView', updateAmountAndShippingData);
  updateAmountAndShippingData();
}

module.exports = {
  makePaypalPayment: makePaypalPayment
};

/***/ }),

/***/ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/paypal/paypalSavedAccountHandler.js":
/*!*****************************************************************************************************************!*\
  !*** ./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/paypal/paypalSavedAccountHandler.js ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var braintreeUtils = __webpack_require__(/*! ../braintreeUtils */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeUtils.js");

var loaderInstance = __webpack_require__(/*! ../loaderHelper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/loaderHelper.js");

var _require = __webpack_require__(/*! ./paypalHelper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/paypal/paypalHelper.js"),
    showPDPButton = _require.showPDPButton,
    hidePDPButton = _require.hidePDPButton,
    showCartErrorMsg = _require.showCartErrorMsg;

var _require2 = __webpack_require__(/*! ../helper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/helper.js"),
    createPaymentFormData = _require2.createPaymentFormData;

var $braintreePDPButton = document.querySelector('.braintree_pdp_button');

function staticImageHandler() {
  var $loaderContainter = document.querySelector('.braintreePayPalLoader');
  var loader = loaderInstance($loaderContainter);
  var $staticPaypalButton = document.querySelector('.braintree-static-paypal-button');
  var checkoutFromCartUrl = $staticPaypalButton.getAttribute('data-checkout-from-cart-url');
  var placeOrderUrl = $staticPaypalButton.getAttribute('data-paypal-placeorder-url');
  var ppAccountData = JSON.parse($staticPaypalButton.getAttribute('data-paypal-account-data'));
  var ppAccountAddressData = JSON.parse(ppAccountData.address);
  var paypalCheckoutFormFields = document.querySelector('.braintree-cart-paypal-buttons-wrap').getAttribute('data-paypal-checkout-form-fields');
  var paypalCheckoutFormData = createPaymentFormData(paypalCheckoutFormFields, {
    firstName: ppAccountAddressData.firstName,
    lastName: ppAccountAddressData.lastName,
    address1: ppAccountAddressData.streetAddress,
    address2: ppAccountAddressData.extendedAddress || '',
    city: ppAccountAddressData.locality,
    postalCode: ppAccountAddressData.postalCode,
    stateCode: ppAccountAddressData.state,
    country: ppAccountAddressData.countryCodeAlpha2,
    email: ppAccountData.email,
    phone: ppAccountAddressData.phone.replace('-', ''),
    paymentMethod: ppAccountData.paymentMethod
  });
  paypalCheckoutFormData.append('braintreeSavePaypalAccount', true);
  paypalCheckoutFormData.append('paymentMethodUUID', ppAccountData.uuid);
  var csrfToken = document.querySelector('.braintree-cart-paypal-buttons-wrap #csrf_token');
  paypalCheckoutFormData.append(csrfToken.name, csrfToken.value);
  loader.show();

  if ($braintreePDPButton && $braintreePDPButton.style.display === '') {
    var res = braintreeUtils.pdpOnlickForAsignedPaypalPayment();

    if (res.error) {
      loader.hide(); // eslint-disable-next-line no-unused-expressions

      window.location.reload;
      return;
    }
  }

  return $.ajax({
    url: checkoutFromCartUrl,
    type: 'POST',
    data: paypalCheckoutFormData,
    contentType: false,
    processData: false,
    success: function success(data) {
      loader.hide();

      if (data.error) {
        var errorMessage = '';

        if (data.fieldErrors.length) {
          data.fieldErrors.forEach(function (error, index) {
            var keys = Object.keys(error);

            if (keys.length) {
              errorMessage += "".concat(keys[index].replace('dwfrm_billing_', '').replace('_', ' '), " ").concat(data.fieldErrors[index][keys[index]], ". ");
            }
          });
          showCartErrorMsg(errorMessage);
        }

        if (data.serverErrors.length) {
          data.serverErrors.forEach(function (error) {
            errorMessage += "".concat(error, ". ");
          });
          showCartErrorMsg(errorMessage);
        }

        if (data.cartError) {
          window.location.href = data.redirectUrl;
        }

        return;
      }

      sessionStorage.setItem('pageState', 'cart');
      window.location.href = placeOrderUrl;
    },
    error: function error(err) {
      loader.hide();

      if (err && err.redirectUrl) {
        window.location.href = err.redirectUrl;
      }
    }
  });
}

function paypalStaticPdpButtonHandler() {
  if ($braintreePDPButton) {
    var $price = document.querySelector('.price .sales .value');
    var isZeroAmount = false;
    var $miniCartQuantity = document.querySelector('.minicart-quantity');
    var $addToCartButton = document.querySelector('.add-to-cart') || document.querySelector('.add-to-cart-global'); // Check minicart quantity and hide PDPbutton if it is not empty

    if ($miniCartQuantity && parseInt($miniCartQuantity.textContent, 0) > 0 || $price && $price.getAttribute('content') === '0.00') {
      // Check if product price is zero
      hidePDPButton($braintreePDPButton);
    }

    if ($addToCartButton.disabled) {
      hidePDPButton($braintreePDPButton);
    }

    $('body').on('product:afterAddToCart', function () {
      hidePDPButton($braintreePDPButton);
    });
    $('body').on('cart:update', function () {
      $miniCartQuantity = parseInt(document.querySelector('.minicart-quantity').textContent, 0);

      if ($addToCartButton.disabled) {
        hidePDPButton($braintreePDPButton);
      }

      if ($miniCartQuantity === 0 && !$addToCartButton.disabled) {
        showPDPButton($braintreePDPButton);
      }
    });
    $('body').on('product:statusUpdate', function () {
      $miniCartQuantity = parseInt(document.querySelector('.minicart-quantity').textContent, 0);
      $price = document.querySelector('.price .sales .value');
      isZeroAmount = false;

      if ($price) {
        isZeroAmount = $price.getAttribute('content') === '0.00';
      }

      if ($miniCartQuantity === 0) {
        if ($addToCartButton.disabled || isZeroAmount) {
          hidePDPButton($braintreePDPButton);
        }

        if (!$addToCartButton.disabled && !isZeroAmount) {
          showPDPButton($braintreePDPButton);
        }
      }
    });
  }
}

module.exports = {
  staticImageHandler: staticImageHandler,
  paypalStaticPdpButtonHandler: paypalStaticPdpButtonHandler
};

/***/ }),

/***/ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/src/srcAccount.js":
/*!***********************************************************************************************!*\
  !*** ./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/src/srcAccount.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var src = __webpack_require__(/*! ../braintreeSrc */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeSrc.js");

var loaderInstance = __webpack_require__(/*! ../loaderHelper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/loaderHelper.js");

function submitAddSrcAccountForm() {
  $('.js_braintree_addSrcAccountForm').submit(function () {
    var $form = $(this);
    var $btSrcFormErrorContainer = document.querySelector('#braintreeSrcFormErrorContainer');
    $form.spinner().start();
    $.post($form.attr('action'), $form.serialize()).done(function (data) {
      $form.spinner().stop();

      if (!data.success) {
        $btSrcFormErrorContainer.style.display = 'block';
        $btSrcFormErrorContainer.textContent = data.error;
      } else {
        location.href = data.redirectUrl;
      }
    }).fail(function (err) {
      if (err.responseJSON.redirectUrl) {
        window.location.href = err.responseJSON.redirectUrl;
      }

      $form.spinner().stop();
    });
    return false;
  });
}

function initAddSrcAccount() {
  var srcIns;
  var $btn = document.querySelector('.js_braintree_src_account_button');
  var $srcNonce = document.querySelector('#braintreeSrcNonce');
  var $btSrcFormErrorContainer = document.querySelector('#braintreeSrcFormErrorContainer');
  var $btSrcLoader = document.querySelector('.braintreeSrcLoader');
  var loader = loaderInstance($btSrcLoader);

  if (JSON.parse($btn.getAttribute('data-is-inited'))) {
    return;
  }

  var config = JSON.parse($btn.getAttribute('data-braintree-config'));

  if (_typeof(config) !== 'object' || config === null) {
    // eslint-disable-next-line no-console
    console.error($btn, 'not valid data-braintree-config');
    return;
  }

  loader.show();

  config.onTokenizePayment = function (data) {
    if ($btSrcFormErrorContainer.style.display === 'block') {
      $btSrcFormErrorContainer.style.display = 'none';
      $btSrcFormErrorContainer.textContent = '';
    }

    $srcNonce.value = data.nonce;
    document.querySelector('.braintreeSrcBtn').click();
  };

  srcIns = src.init(config, $btn);
  srcIns.loadSrcButton();
  $btn.setAttribute('data-is-inited', true);
  submitAddSrcAccountForm();
}

module.exports = {
  initAddSrcAccount: initAddSrcAccount
};

/***/ }),

/***/ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/src/srcHelper.js":
/*!**********************************************************************************************!*\
  !*** ./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/src/srcHelper.js ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $srcContent = document.querySelector('.js_braintree_srcContent');
var $srcSessionAccount = document.querySelector('#sessionSrcAccount');
var $srcAccountList = document.querySelector('#braintreeSrcAccountsList');
var $srcButton = document.querySelector('.js_braintree_src_button');
var $accoutnListBlock = document.querySelector('.braintree_used_src_account');
var $alertInfo = document.getElementById('src-content') && document.getElementById('src-content').querySelectorAll('.alert-info')[0];

var helper = __webpack_require__(/*! ../helper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/helper.js");

var $saveSRCAccountCheckbox = document.querySelector('#braintreeSaveSRCAccount');

function srcUpdateAmount(srcIns, config) {
  // eslint-disable-line require-jsdoc
  srcIns.loader.show();
  $.ajax({
    url: config.getOrderInfoUrl,
    type: 'get',
    dataType: 'json',
    success: function success(data) {
      srcIns.loader.hide();
      srcIns.updateAmount(data.amount);
    },
    error: function error() {
      window.location.reload();
    }
  });
}

function setSessionAccountData(cardDescrition) {
  $srcSessionAccount.value = cardDescrition;
  $srcSessionAccount.text = cardDescrition;
  $srcSessionAccount.selected = true;
  $accoutnListBlock.style.display = 'block';
  $srcButton.style.display = 'none';
  $srcContent.setAttribute('data-paypal-is-hide-continue-button', false);
  helper.continueButtonToggle(false);
}

function updateSessionAccountDropdown() {
  if ($srcAccountList.value === 'newaccount') {
    $srcButton.style.display = 'block';
    $alertInfo.style.display = 'block';
    helper.continueButtonToggle(true);
    $srcContent.setAttribute('data-paypal-is-hide-continue-button', true);

    if ($saveSRCAccountCheckbox) {
      $saveSRCAccountCheckbox.checked = true;
    }
  } else {
    $srcButton.style.display = 'none';
    $alertInfo.style.display = 'none';
    helper.continueButtonToggle(false);
    $srcContent.setAttribute('data-paypal-is-hide-continue-button', false);

    if ($saveSRCAccountCheckbox) {
      $saveSRCAccountCheckbox.checked = JSON.parse($srcSessionAccount.getAttribute('data-save'));
    }
  }
}

function initSessionAccountDropdownState() {
  if ($srcAccountList.value === 'newaccount') {
    $alertInfo.style.display = 'block';
    $accoutnListBlock.style.display = 'none';
  } else {
    helper.continueButtonToggle(false);
    $srcContent.setAttribute('data-paypal-is-hide-continue-button', false);
    $srcButton.style.display = 'none';
    $alertInfo.style.display = 'none';
  }
}
/*
    Remove method was used and change appearance of googlepay tab
**/


function removeSessionNonce() {
  var $sessionAccount = document.querySelector('#sessionSrcAccount');
  $sessionAccount.value = '';
  $sessionAccount.text = '';
  $sessionAccount.setAttribute('data-save', false);
  $accoutnListBlock.style.display = 'none';
  document.querySelector('#braintreeSRCNonce').value = '';
  document.querySelector('#braintreeSrcBillingAddress').value = '';
  document.querySelector('#braintreeSrcCardDescription').value = '';
  document.querySelector('#newSrcAccount').selected = true;
  updateSessionAccountDropdown();
}

function createSrcShippingAddressData(shippingData) {
  var shippingAddress = {};
  shippingAddress.recipientName = shippingData.firstName + ' ' + shippingData.lastName;
  shippingAddress.phone = shippingData.phoneNumber;
  shippingAddress.countryCodeAlpha2 = shippingData.countryCode;
  shippingAddress.streetAddress = shippingData.streetAddress;
  shippingAddress.extendedAddress = shippingData.extendedAddress;
  shippingAddress.locality = shippingData.locality;
  shippingAddress.region = shippingData.region;
  shippingAddress.postalCode = shippingData.postalCode;
  return JSON.stringify(shippingAddress);
}

module.exports = {
  srcUpdateAmount: srcUpdateAmount,
  setSessionAccountData: setSessionAccountData,
  updateSessionAccountDropdown: updateSessionAccountDropdown,
  initSessionAccountDropdownState: initSessionAccountDropdownState,
  removeSessionNonce: removeSessionNonce,
  createSrcShippingAddressData: createSrcShippingAddressData
};

/***/ }),

/***/ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/src/srcPayment.js":
/*!***********************************************************************************************!*\
  !*** ./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/src/srcPayment.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var src = __webpack_require__(/*! ../braintreeSrc */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeSrc.js");

var srcHelper = __webpack_require__(/*! ./srcHelper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/src/srcHelper.js");

var _require = __webpack_require__(/*! ./../helper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/helper.js"),
    createPaymentFormData = _require.createPaymentFormData,
    showCartErrorMsg = _require.showCartErrorMsg,
    updateBillingFormValues = _require.updateBillingFormValues;

var $srcButton = document.querySelector('.js_braintree_src_button');
var $srcNonce = document.querySelector('#braintreeSRCNonce');
var $srcCardDescription = document.querySelector('#braintreeSrcCardDescription');
var $srcBillingAddress = document.querySelector('#braintreeSrcBillingAddress');
var $srcAccountList = document.querySelector('#braintreeSrcAccountsList');
var $srcOnCart = document.querySelector('.braintree-cart-src-button');

function initSrcButton(continueButton) {
  var srcIns;
  var config = JSON.parse($srcButton.getAttribute('data-braintree-config'));

  if (_typeof(config) !== 'object' || config === null) {
    // eslint-disable-next-line no-console
    console.error($srcButton, 'not valid data-braintree-config');
  }

  if ($srcAccountList) {
    srcHelper.initSessionAccountDropdownState();
    $srcAccountList.addEventListener('change', srcHelper.updateSessionAccountDropdown);
  }

  config.onTokenizePayment = function (response) {
    __webpack_require__(/*! ../helper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/helper.js").removeActiveSessionPayment();

    var cardDescription = response.details.cardType + ' ' + response.description;
    var deviceData = document.querySelector('input[name=braintreeSrcDeviceDataInput]').value; // Billing Checkout

    if (!$srcOnCart) {
      $srcNonce.value = response.nonce;
      $srcCardDescription.value = cardDescription;
      srcHelper.setSessionAccountData(cardDescription); // Updating Storefront Billing Form data with SRC Billing

      var scrPayBillingData = response.billingAddress;
      var storeFrontBillingData = JSON.parse(document.querySelector('.braintree-billing-payment-wrap').getAttribute('data-billing-form-fields-names'));
      storeFrontBillingData.dwfrm_billing_addressFields_firstName = scrPayBillingData.firstName;
      storeFrontBillingData.dwfrm_billing_addressFields_lastName = scrPayBillingData.lastName;
      storeFrontBillingData.dwfrm_billing_addressFields_address1 = scrPayBillingData.streetAddress;
      storeFrontBillingData.dwfrm_billing_addressFields_address2 = scrPayBillingData.extendedAddress || '';
      storeFrontBillingData.dwfrm_billing_addressFields_city = scrPayBillingData.locality;
      storeFrontBillingData.dwfrm_billing_addressFields_postalCode = scrPayBillingData.postalCode;
      storeFrontBillingData.dwfrm_billing_addressFields_states_stateCode = scrPayBillingData.region;
      storeFrontBillingData.dwfrm_billing_addressFields_country = scrPayBillingData.countryCode;
      storeFrontBillingData.dwfrm_billing_contactInfoFields_email = response.userData.userEmail;
      storeFrontBillingData.dwfrm_billing_contactInfoFields_phone = scrPayBillingData.phoneNumber;
      scrPayBillingData.email = response.userData.userEmail;
      $srcBillingAddress.value = JSON.stringify(scrPayBillingData);
      updateBillingFormValues(storeFrontBillingData);
      continueButton.click();
      return;
    } // Cart Checkout


    var shippingAddressData = srcHelper.createSrcShippingAddressData(response.shippingAddress);
    var paymentMethodName = JSON.parse($srcButton.getAttribute('data-braintree-config')).paymentMethodName;
    var $braintreeCartButtons = document.querySelector('.braintree-cart-buttons-wrap');
    var placeOrderUrl = $braintreeCartButtons.getAttribute('data-checkout-placeorder-url');
    var checkoutFromCartUrl = $braintreeCartButtons.getAttribute('data-checkout-from-cart-url');
    var checkoutFormFields = $braintreeCartButtons.getAttribute('data-checkout-form-fields');
    var srcCheckoutFormData = createPaymentFormData(checkoutFormFields, {
      firstName: response.userData.userFirstName,
      lastName: response.userData.userLastName,
      address1: response.billingAddress.streetAddress,
      address2: response.billingAddress.extendedAddress || '',
      city: response.billingAddress.locality,
      postalCode: response.billingAddress.postalCode,
      stateCode: response.billingAddress.region,
      country: response.billingAddress.countryCode,
      email: response.userData.userEmail,
      phone: response.billingAddress.phoneNumber,
      paymentMethod: paymentMethodName
    });
    var csrfToken = document.querySelector('.braintree-cart-buttons-wrap  #csrf_token');
    srcCheckoutFormData.append(csrfToken.name, csrfToken.value);
    srcCheckoutFormData.append('braintreeSrcNonce', response.nonce);
    srcCheckoutFormData.append('braintreeSrcDeviceDataInput', deviceData);
    srcCheckoutFormData.append('braintreeSaveSRCAccount', true);
    srcCheckoutFormData.append('braintreeSrcShippingAddress', shippingAddressData || '{}');
    srcCheckoutFormData.append('braintreeSrcCardDescription', cardDescription);
    $.ajax({
      type: 'POST',
      url: checkoutFromCartUrl,
      data: srcCheckoutFormData,
      contentType: false,
      processData: false,
      success: function success(data) {
        if (data.error) {
          var errorMessage = '';

          if (data.fieldErrors.length) {
            data.fieldErrors.forEach(function (error, index) {
              var keys = Object.keys(error);

              if (keys.length) {
                errorMessage += "".concat(keys[index].replace('dwfrm_billing_', '').replace('_', ' '), " ").concat(data.fieldErrors[index][keys[index]], ". ");
              }
            });
            showCartErrorMsg(errorMessage);
          }

          if (data.serverErrors.length) {
            data.serverErrors.forEach(function (error) {
              errorMessage += "".concat(error, ". ");
            });
            showCartErrorMsg(errorMessage);
          }

          if (data.cartError) {
            window.location.href = data.redirectUrl;
          }

          return;
        }

        sessionStorage.setItem('pageState', 'cart');
        srcIns.loader.hide();
        window.location.href = placeOrderUrl;
      },
      error: function error(err) {
        if (err && err.redirectUrl) {
          window.location.href = err.redirectUrl;
        }
      }
    });
  };

  srcIns = src.init(config, $srcButton);
  srcIns.loadSrcButton();
  $('body').on('checkout:updateCheckoutView', srcHelper.srcUpdateAmount.bind(null, srcIns, config));
  $('body').on('braintree:updateCartTotals', srcHelper.srcUpdateAmount.bind(null, srcIns, config));
  srcHelper.srcUpdateAmount(srcIns, config);
}

module.exports = {
  initSrcButton: initSrcButton
};

/***/ }),

/***/ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/venmo/venmoAccount.js":
/*!***************************************************************************************************!*\
  !*** ./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/venmo/venmoAccount.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var braintreeVenmo = __webpack_require__(/*! ../braintreeVenmo */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeVenmo.js");

var venmoHelper = __webpack_require__(/*! ./venmoHelper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/venmo/venmoHelper.js");

var helper = __webpack_require__(/*! ../helper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/helper.js");

var loaderInstance = __webpack_require__(/*! ../loaderHelper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/loaderHelper.js");

var accountsLoader;

function initAddVenmoAccount() {
  var $btn = document.querySelector('.js_braintree_accountVenmoButton');
  var $venmoErrorContainer = document.querySelector('#venmoAccountErrorContainer');
  var $venmoLoader = document.querySelector('#braintreeVenmoAccLoader');

  if (JSON.parse($btn.getAttribute('data-is-inited'))) {
    return;
  }

  var config = JSON.parse($btn.getAttribute('data-braintree-config'));

  if (_typeof(config) !== 'object' || config === null) {
    // eslint-disable-next-line no-console
    console.error($btn, 'not valid data-braintree-config');
    return;
  }

  config.$loaderContainer = $venmoLoader;
  config.$errorContainer = $venmoErrorContainer;

  config.deviceNotSupportVenmo = function () {
    venmoHelper.showVenmoAccountError();
    $venmoErrorContainer.textContent = config.messages.VENMO_BROWSER_NOT_SUPPORTED;
  };

  config.onTokenizePayment = function (data) {
    var accountVenmoButton = document.querySelector('.js_braintree_accountVenmoButton');
    var venmoAddAccountHandler = accountVenmoButton.getAttribute('data-venmo-add-account-handler');
    var venmoAccountFormFields = accountVenmoButton.getAttribute('data-venmo-account-form-fields');
    var venmoAccountFormData = helper.createPaymentFormData(venmoAccountFormFields, {
      nonce: data.nonce
    });
    var csrfToken = document.querySelector('.js_braintree_accountVenmoButton_wrapper #csrf_token');
    venmoAccountFormData.append(csrfToken.name, csrfToken.value);
    var $loaderContainter = document.querySelector('#venmoAccountBtLoader');
    accountsLoader = loaderInstance($loaderContainter);
    accountsLoader.show();
    return $.ajax({
      type: 'POST',
      url: venmoAddAccountHandler,
      data: venmoAccountFormData,
      contentType: false,
      processData: false
    }).then(function (paymentData) {
      venmoHelper.hideVenmoAccountBtn();
      $venmoLoader.style.display = 'none';
      $venmoErrorContainer.textContent = '';
      $venmoErrorContainer.style.display = 'none';
      $.get(paymentData.renderAccountsUrl).then(function (tplData) {
        accountsLoader.hide();
        document.querySelector('.venmo-accounts').innerHTML = tplData;
        document.querySelectorAll('.venmo-accounts .remove-bt-payment').forEach(function (el) {
          el.addEventListener('click', helper.removeBtPayment);
        });
      });
    }).fail(function (_ref) {
      var responseJSON = _ref.responseJSON;
      accountsLoader.hide();
      $venmoLoader.style.display = 'none';
      $venmoErrorContainer.style.display = 'block';
      $venmoErrorContainer.textContent = responseJSON.error;
    });
  };

  braintreeVenmo.init(config, $btn);
  $btn.setAttribute('isInited', true);
}

function initVenmoEvents() {
  var $addVenmoAccountBtn = document.querySelector('.add-venmo-account');
  $addVenmoAccountBtn.addEventListener('click', function () {
    venmoHelper.showVenmoAccountBtn();
    initAddVenmoAccount();
  });
}

function initVenmoButtonsEvents() {
  document.querySelector('.venmo-accounts').onclick = function (e) {
    if (e.target.classList.contains('remove-bt-payment')) {
      helper.removeBtPayment(e);
    } else if (e.target.classList.contains('braintree-make-default-card')) {
      var target = e.target;
      var url = target.getAttribute('data-make-default-url');
      var id = target.getAttribute('data-id');
      var paymentMethodID = document.querySelector('.venmo-accounts').getAttribute('data-payment-method-id');
      var $loaderContainter = document.querySelector('#' + target.getAttribute('data-loader'));
      var loader = loaderInstance($loaderContainter);
      loader.show();
      helper.setDefaultProperty({
        url: url,
        id: id,
        paymentMethodID: paymentMethodID,
        loader: loader
      });
    }
  };
}

module.exports = {
  initVenmoEvents: initVenmoEvents,
  initAddVenmoAccount: initAddVenmoAccount,
  initVenmoButtonsEvents: initVenmoButtonsEvents
};

/***/ }),

/***/ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/venmo/venmoHelper.js":
/*!**************************************************************************************************!*\
  !*** ./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/venmo/venmoHelper.js ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var helper = __webpack_require__(/*! ../helper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/helper.js");

var $accountsList = document.querySelector('#braintreeVenmoAccountsList');
var $saveVenmoAccountCountainerEl = document.querySelector('#braintreeSaveVenmoAccountContainer');
var $saveVenmoAccountEl = document.querySelector('#braintreeSaveVenmoAccount');
var $venmoButton = document.querySelector('.js_braintree_venmo_button');
var $braintreeVenmoAccount = document.getElementById('braintreeVenmoAccount');
var $venmoAccount = document.querySelector('.js_braintree_used_venmo_account');
var $braintreeVenmoUserId = document.querySelector('#braintreeVenmoUserId');
var $venmoContent = document.querySelector('.js_braintree_venmoContent');
var $addVenmoAccountBtn = document.querySelector('.add-venmo-account');
var $venmoAccountWrapper = document.querySelector('.js_braintree_accountVenmoButton_wrapper');

function showVenmoAccount() {
  if (!$accountsList) {
    $venmoAccount.classList.remove('used-venmo-account-hide');
    $braintreeVenmoAccount.options[0].text = $braintreeVenmoUserId.value;
  }

  $venmoButton.style.display = 'none';
  helper.continueButtonToggle(false);
}

function hideShowButtons() {
  if ($accountsList.value === 'newaccount') {
    $venmoButton.style.display = 'block';
    helper.continueButtonToggle(true);
    $venmoContent.setAttribute('data-paypal-is-hide-continue-button', true);
  } else {
    $venmoButton.style.display = 'none';
    helper.continueButtonToggle(false);
    $venmoContent.setAttribute('data-paypal-is-hide-continue-button', false);

    if ($saveVenmoAccountCountainerEl) {
      $saveVenmoAccountEl.checked = false;
      $saveVenmoAccountCountainerEl.style.display = 'none';
    }
  }
}

function createLoaderContainter($target) {
  var $loaderContainter = document.createElement('div');
  $loaderContainter.className = 'venmo-braintree-loader';
  helper.continueButtonToggle(true);
  return $target.parentNode.insertBefore($loaderContainter, $target);
}

function hideVenmoButton() {
  $venmoButton.parentElement.firstElementChild.style.display = 'none';
  document.querySelector('.payment-options[role=tablist] .nav-item[data-method-id="Venmo"]').style.display = 'none'; // Remove the venmo select payment method radiobutton
}
/**
 * updates the billing address form values within saved billing
 * @param {Object} billingAddress - the billing Address
 */


function updateBillingAddressFormValues(billingAddress) {
  var form = $('form[name=dwfrm_billing]');
  var inputNames = ['firstName', 'lastName', 'address1', 'address2', 'city', 'postalCode', 'country'];
  if (!form) return;
  $.each(inputNames, function (index, value) {
    $("input[name$=_".concat(value, "]"), form).val(decodeURIComponent(billingAddress[value]));
  });
  $('select[name$=_stateCode],input[name$=_stateCode]', form).val(billingAddress.stateCode);
}

function showVenmoAccountBtn() {
  $addVenmoAccountBtn.style.display = 'none';
  $venmoAccountWrapper.style.display = 'block';
}

function hideVenmoAccountBtn() {
  $addVenmoAccountBtn.style.display = 'block';
  $venmoAccountWrapper.style.display = 'none';
}

function showVenmoAccountError() {
  $addVenmoAccountBtn.style.display = 'none';
  $venmoAccountWrapper.style.display = 'block';
  [].slice.call($venmoAccountWrapper.children).forEach(function (item) {
    if (!item.classList.contains('error')) {
      item.style.display = 'none';
    }
  });
}
/*
    Remove method was used and change appearance of venmo tab
**/


function removeSessionNonce() {
  var defaultOption = helper.getOptionByDataDefault('#braintreeVenmoAccountsList');
  document.querySelector('#braintreeVenmoNonce').value = '';
  document.querySelector('#braintreeVenmoBilling').value = '';

  if (defaultOption) {
    defaultOption.selected = true;
    hideShowButtons();
  } else {
    $venmoAccount.classList.remove('used-venmo-account');
    $venmoAccount.classList.add('used-venmo-account-hide');
    $venmoButton.style.display = 'block';
  }
}

module.exports = {
  showVenmoAccount: showVenmoAccount,
  hideShowButtons: hideShowButtons,
  createLoaderContainter: createLoaderContainter,
  hideVenmoButton: hideVenmoButton,
  updateBillingAddressFormValues: updateBillingAddressFormValues,
  showVenmoAccountBtn: showVenmoAccountBtn,
  hideVenmoAccountBtn: hideVenmoAccountBtn,
  showVenmoAccountError: showVenmoAccountError,
  removeSessionNonce: removeSessionNonce
};

/***/ }),

/***/ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/venmo/venmoPayment.js":
/*!***************************************************************************************************!*\
  !*** ./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/venmo/venmoPayment.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var braintreeVenmo = __webpack_require__(/*! ../braintreeVenmo */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeVenmo.js");

var venmoHelper = __webpack_require__(/*! ./venmoHelper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/venmo/venmoHelper.js");

var loaderInstance = __webpack_require__(/*! ../loaderHelper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/loaderHelper.js");

var helper = __webpack_require__(/*! ../helper */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/helper.js");

var $venmoButton = document.querySelector('.js_braintree_venmo_button');
var $btVermoAccountsList = document.querySelector('#braintreeVenmoAccountsList');
var $braintreeVenmoNonce = document.querySelector('#braintreeVenmoNonce');
var $braintreeVenmoUserId = document.querySelector('#braintreeVenmoUserId');
var $submitShippingBtn = document.querySelector('.button, .submit-shipping');
var $contactEmail = document.querySelector('.contact-info-block [name=dwfrm_billing_contactInfoFields_email]');
var $hideVenmoButton = document.querySelector('.braintree-venmo-pay-button');
var $billingForm = document.querySelector('.card-body [id=dwfrm_billing]');
var $venmoContent = document.querySelector('.js_braintree_venmoContent');

function makeVenmoPayment(continueButton) {
  var config = JSON.parse($venmoButton.getAttribute('data-braintree-config'));

  if (_typeof(config) !== 'object' || config === null) {
    // eslint-disable-next-line no-console
    console.error($venmoButton, 'not valid data-braintree-config');
  }

  if (JSON.parse($hideVenmoButton.getAttribute('data-is-hide-venmo-button')) && $btVermoAccountsList !== 'newaccount') {
    $venmoButton.style.display = 'none';
  }

  if ($btVermoAccountsList) {
    $btVermoAccountsList.addEventListener('change', function () {
      venmoHelper.hideShowButtons();
    });
    venmoHelper.hideShowButtons();
  }

  config.onClick = function () {
    if ($billingForm.checkValidity()) {
      /**
          * Setting current customer Billing address to form
          *  For the case when SFCC redirects customer from payment stage to shipping stage
          *  after successful Venmo app response
      */
      document.querySelector('#braintreeVenmoBilling').value = JSON.stringify(helper.getBillingAddressFormValues());
      return true;
    }

    $contactEmail.classList.add('is-invalid');
    return false;
  };

  config.deviceNotSupportVenmo = function () {
    venmoHelper.hideVenmoButton();
  };

  config.onTokenizePayment = function (data) {
    var $loaderContainer = venmoHelper.createLoaderContainter(document.querySelector('.page'));
    loaderInstance($loaderContainer).show();
    helper.removeActiveSessionPayment();
    $braintreeVenmoNonce.value = data.nonce;
    $braintreeVenmoUserId.value = data.details.username;

    if (window.history.state !== 'shipping') {
      continueButton.click();
      document.querySelector('.venmo-braintree-loader').remove();
      return true;
    }

    venmoHelper.updateBillingAddressFormValues(JSON.parse(document.querySelector('#braintreeVenmoBilling').value)); // move to stage payment

    $submitShippingBtn.click();
    $venmoButton.setAttribute('data-is-valid-stage', true);
    $venmoButton.setAttribute('data-user-email', $contactEmail.value);
    document.querySelector('.venmo-braintree-loader').remove();
  };
  /**
      *  Init Venmo app with correct URL fragment (hash) to prevent Browser from opening the URL in a new tab.
      *  Braintree JS SDK is preserving the URL in its entirety and modifies the URL fragment (hash)
      *  to send back the results from Venmo (e.g. nonce, error message, etc.)
      *
  */


  var hashChange = new MutationObserver(function (mutations) {
    var correlationId = document.querySelector('#braintreeVenmoDeviceData').value || null;
    var mutation = mutations.find(function (element) {
      return element.attributeName === 'data-checkout-stage' && element.target.dataset.checkoutStage === 'payment';
    });

    if (!mutation) {
      return false;
    }

    if (!correlationId) {
      braintreeVenmo.init(config, $venmoButton);
      return true;
    }

    if ($braintreeVenmoNonce.value && JSON.parse($venmoButton.getAttribute('data-is-valid-stage'))) {
      $contactEmail.value = $venmoButton.getAttribute('data-user-email') || '';
      $venmoButton.setAttribute('data-is-valid-stage', false);
      continueButton.click();
      return true;
    }

    if ($venmoContent.classList.contains('active') && mutation.oldValue === 'placeOrder') {
      venmoHelper.showVenmoAccount();
      $venmoContent.setAttribute('data-paypal-is-hide-continue-button', false);
      $hideVenmoButton.setAttribute('data-is-hide-venmo-button', true);
    }
  });
  hashChange.observe(document.querySelector('#checkout-main'), {
    attributeOldValue: true
  });
}

module.exports = {
  makeVenmoPayment: makeVenmoPayment
};

/***/ }),

/***/ "./cartridges/int_braintree_sfra/cartridge/client/default/js/int_braintree.js":
/*!************************************************************************************!*\
  !*** ./cartridges/int_braintree_sfra/cartridge/client/default/js/int_braintree.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./braintree/braintreeMFRA */ "./cartridges/int_braintree_sfra/cartridge/client/default/js/braintree/braintreeMFRA.js")();

/***/ })

/******/ });
//# sourceMappingURL=int_braintree.min.js.map