<iscontent type="text/html" charset="UTF-8" compact="true"/>
<iscomment> Yotpo Modules </iscomment>
<isinclude template="util/yotpomodules.isml" />
<isif condition="${(pdict.cache != null) ? pdict.cache : true}">
	<iscache type="relative" hour="24" varyby="price_promotion"/>
</isif>
<iscomment>
	This template is best used via a **remote** include (Product-HitTile) and _not_ local include.
	This template renders a product tile using a product. The following parameters
	must be passed into the template module:

	product 		: the product to render the tile for
	showswatches 	: check, whether to render the color swatches (default is false)
	showpricing		: check, whether to render the pricing (default is false)
	showpromotion	: check, whether to render the promotional messaging (default is false)
	showrating		: check, whether to render the review rating (default is false)
	showcompare		: check, whether to render the compare checkbox (default is false)
</iscomment>
<isset name="Product" value="${pdict.product}" scope="page"/>

<isif condition="${!empty(Product)}">
	<iscomment>
		Get the colors selectable from the current product master or variant range if we
		need to determine them based on a search result.
	</iscomment>
	<isscript>

		var PromotionMgr = require('dw/campaign/PromotionMgr');
		var ProductUtils = require('~/cartridge/scripts/product/ProductUtils.js');		
		// set default settings
		/*
			Relies on the fact that the represented product is a variant if color slicing is enabled
		 	See script API doc @ProductSearchHit.product
		*/
		var showswatches = false;
		var showpricing = pdict.showpricing || false;
		var showpromotion = pdict.showpromotion || false;
		var isEnableReviewsRatingsExists = 'enableReviewsRatings' in Product.custom;
		var showrating = (pdict.showrating || false) && (isEnableReviewsRatingsExists && Product.custom.enableReviewsRatings); 
		var showcompare = pdict.showcompare || false;

		var selectableColors = new dw.util.ArrayList();
		var imageSize = 'medium';
		var PVM = Product.variationModel;
		var colorVarAttr, selectedColor, imageSource, image, variantInfo;
		if (PVM) {
			colorVarAttr = PVM.getProductVariationAttribute('color');
			if (colorVarAttr) {
				selectableColors = PVM.getFilteredValues(colorVarAttr);
			}
			if (Product.variationGroup && colorVarAttr) {
				imageSource = selectedColor = PVM.getSelectedValue(colorVarAttr);
				if (!imageSource) {
					if (!PVM.variants.isEmpty()) {
						imageSource = PVM.defaultVariant;
						if (imageSource) {
							selectedColor = PVM.getVariationValue(imageSource, colorVarAttr);
						}
					}
				}
			} else if (Product.isMaster() && PVM.defaultVariant) {
				if (colorVarAttr) {
					imageSource = PVM.defaultVariant;
					selectedColor = imageSource.variationModel.getSelectedValue(colorVarAttr);
				} else {
					imageSource = PVM.master;
				}
			} else if (Product.isVariant() && colorVarAttr) {
				imageSource = selectedColor = PVM.getSelectedValue(colorVarAttr);
				if (!imageSource) {
					if (!PVM.variants.isEmpty()) {
						imageSource = PVM.variants[0];
						selectedColor = imageSource.variationModel.getSelectedValue(colorVarAttr);
					}
				}
			} else {
				// standard product, product set or bundle
				imageSource = Product;
			}
			
			
		} else {
			imageSource = Product;
		}
		image = imageSource.getImage(imageSize, 0);
		
		// Generate link to product detail page: by default it's just the product of the product search hit.
		// If a color variation is available, the first color is used as link URL.

		//RAP-3006 - added cgid because the breadcumb will not work otherwise.  It needs to pass the category ID
		// in order to show the proper category the user clicked on
		var productUrl = URLUtils.url('Product-Show', 'pid', Product.ID, 'cgid', pdict.CurrentHttpParameterMap.cgid);
	//	if (selectedColor) {
	//		productUrl = Product.variationModel.urlSelectVariationValue('Product-Show', colorVarAttr, selectedColor) + '&cgid=' + pdict.CurrentHttpParameterMap.cgid;
	//	}
		
		importScript("int_tatcha_dis:common/GetImageUrl.ds");
		var imageUrl = getImageUrl(Product, 'medium');

			// Get the variation infomation
		if (PVM) {
			if(PVM.productVariationAttributes.length > 0){
				if(PVM.getProductVariationAttribute('color') && PVM.getAllValues(PVM.getProductVariationAttribute('color')).length > 1){
					variantInfo = PVM.getAllValues(PVM.getProductVariationAttribute('color')).length + ' Colors';
				} else if(PVM.getProductVariationAttribute('size') && PVM.getAllValues(PVM.getProductVariationAttribute('size')).length > 1){
					variantInfo = PVM.getAllValues(PVM.getProductVariationAttribute('size')).length + ' Sizes';
				} else {
					variantInfo = '';
				}
			}
		}	

		//Marketing flag
		var marketingFlag ='';
		if(dw.util.StringUtils.trim(Product.custom.marketingFlag1) != '' || dw.util.StringUtils.trim(Product.custom.marketingFlag2) != ''){
			if(dw.util.StringUtils.trim(Product.custom.marketingFlag1) !=''){
				marketingFlag = '<span class="product-marketing-flag">'+Product.custom.marketingFlag1+'</span>';
			}
		
			if(dw.util.StringUtils.trim(Product.custom.marketingFlag1) != '' && dw.util.StringUtils.trim(Product.custom.marketingFlag2) != ''){
				marketingFlag = marketingFlag + '<span class="separator">â€¢</span>';
			}
	
			if(dw.util.StringUtils.trim(Product.custom.marketingFlag2) !=''){
				marketingFlag = marketingFlag + '<span class="product-marketing-flag">'+Product.custom.marketingFlag2+'</span>';
			}
		
		}
		
		var Site = require('dw/system/Site');
		var giftBuilderSKU = Site.getCurrent().getCustomPreferenceValue('giftBuilderSKU');
		var EgiftProduct = Site.getCurrent().getCustomPreferenceValue('EgiftProduct-ID');
		var giftItem = false;
		if((giftBuilderSKU && Product.ID==giftBuilderSKU) || (EgiftProduct && Product.ID==EgiftProduct)){
			giftItem = true;
			showpricing = false;
		}
	</isscript>
	
	<div class="product-tile product-list-unit" id="${Product.UUID}" data-itemid="${Product.ID}"><!-- dwMarker="product" dwContentID="${Product.UUID}" -->
		<iscomment>Image</iscomment>
		<iscomment>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</iscomment>
		<div class="product-img-block quickview-enabled" data-matchbox-item="${Product.ID}"><!-- dwMarker="product" dwContentID="${Product.UUID}" -->
			<iscomment>Render the thumbnail</iscomment>
			<iscomment>If image couldn't be determined, display a "no image" medium.</iscomment>
			<isscript>
				var productName = Product.name + (!empty(Product.custom.skinTypeVariation)? ' - ' + Product.custom.skinTypeVariation : '');
				var imageLabel = "image-" + productName;
			</isscript>
			<isif condition="${!empty(image)}">
				<isset name="thumbnailUrl" value="${image.getURL()}" scope="page"/>
				<isset name="thumbnailAlt" value="${image.alt}" scope="page"/>
				<isset name="thumbnailTitle" value="${image.title}" scope="page"/>
			<iselse/>
				<isset name="thumbnailUrl" value="${URLUtils.staticURL('/images/noimagelarge.png')}" scope="page"/>
				<isset name="thumbnailAlt" value="${productName}" scope="page"/>
				<isset name="thumbnailTitle" value="${productName}" scope="page"/>
			</isif>

			<iscomment>RAP-2997, if the product name is missing from the image title, add it in</iscomment>
			<isif condition="${thumbnailTitle.charAt(0) == ','}">
				<isset name="thumbnailTitle" value="${Product.name + thumbnailTitle}" scope="page"/>
			</isif>
			<isif condition="${thumbnailAlt.charAt(0) == ','}">
				<isset name="thumbnailAlt" value="${Product.name + thumbnailAlt}" scope="page"/>
			</isif>
			<a class="thumb-link product-view-link" href="${productUrl}" data-matchbox-click="${Product.ID}" aria-label="${imageLabel}" data-id="${Product.ID}" title="${productName}">
				<img class="img-responsive product-img lazyImage" src="${URLUtils.staticURL('/images/loader.gif')}" data-src="${imageUrl}" alt="${thumbnailAlt}"/>
			</a>
		</div>
		
		<iscomment>Marketing Flag </iscomment>		
		<div class="product-marketing-flag-block">
			<isprint value="${marketingFlag}" encoding="off"/>				
		</div>

		<iscomment>Product Name</iscomment>
		<iscomment>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</iscomment>
		<h2 class="product-name name-link">
			<a class="product-view-link" href="${productUrl}" data-matchbox-click="${Product.ID}" data-id="${Product.ID}" aria-label="${Resource.msgf('product.label','product',null, productName)}" title="${Resource.msgf('product.label','product',null, productName)}">
				<isprint value="${Product.name.substring(0,48)}"/>
				<span class="product-subtitle">
				<isif condition="${!empty(pdict.Product.custom.secondaryName)}"> 
					<isprint value="${pdict.Product.custom.secondaryName.substring(0,44)}" encoding="on"/>
				</isif>
				</span>
			</a>
		</h2>
		

		<div class="product-price-variant-block">
			<iscomment>Pricing</iscomment>
			<iscomment>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</iscomment>
			
				 <isif condition="${showpricing}">
  			  		<isinclude template="product/components/valuepricing"/>
  			  	<iselse>
  			  			<span class ="product-price">
  			  			<span class= "price-sales">
  			  				&nbsp
  			  				&nbsp
  			  			</span>
  			  			</span>
  			  	</iselse>
				</isif>
			
			<iscomment>Variants count </iscomment>
			<isif condition="${!empty(PVM) && !empty(PVM.variants) && !empty(variantInfo)}"> 
				<span class="separator">|</span>
				<span class="product-variants"><a href="#" class="plp-list-quick-view open-qv-modal" data-url="${productUrl}"><isprint value="${variantInfo}" /></a></span>			
			</isif>
		</div>
		<isscript>
			var ratingLink = "rating-" + Product.name; 
		</isscript>
		<a class="product-view-link" href="${productUrl}&reviews=true" aria-label="${ratingLink}">
			<div class="product-rating-summary d-flex justify-content-center" >
				<iscomment>Rating</iscomment>
				<iscomment>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</iscomment>
				<isif condition="${showrating && !Product.productSet}">
					<isyotpocategorybottomlinewidget product="${pdict.product}" />
				</isif>
			</div>
		</a>

		
		<div style="display: none">
			<iscomment>Promotion</iscomment>
			<iscomment>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</iscomment>
			<isif condition="${showpromotion}">
				<isset name="promos" value="${dw.campaign.PromotionMgr.activeCustomerPromotions.getProductPromotions(Product)}" scope="page"/>
				<isif condition="${!empty(promos)}">
					<div class="product-promo">
						<isloop items="${promos}" alias="promo" status="promoloopstate">
							<div class="promotional-message">
								<isprint value="${promo.calloutMsg}" encoding="off"/>
							</div>
						</isloop>
					</div>
				</isif>
			</isif>
		</div>
		

 
		<iscomment>Swatches</iscomment>
		<iscomment>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</iscomment>
		<isif condition="${showswatches}">
			<iscomment>
				Render the color swatch secion for a product. We show color swatches for color variations known to the product master.
			</iscomment>

			<isif condition="${!empty(selectableColors) && selectableColors.size() > 1 && !empty(colorVarAttr)}">
				<div class="product-swatches">
					<iscomment>render a link to the palette and hide the actual palette if there are more than five colors contained</iscomment>
					<isif condition="${selectableColors.size() > 5}">
						<a class="product-swatches-all">${Resource.msg('productresultarea.viewallcolors','search',null)} (<isprint value="${selectableColors.size()}"/>)</a>
					</isif>

					<iscomment>render the palette, the first swatch is always preselected</iscomment>
					<ul class="swatch-list<isif condition="${selectableColors.size() > 5}"> swatch-toggle</isif>">
						<isloop items="${selectableColors}" var="colorValue" status="varloop">
							<iscomment>Determine the swatch and the thumbnail for this color</iscomment>
							<isset name="colorSwatch" value="${colorValue.getImage('swatch')}" scope="page"/>
							<isset name="colorThumbnail" value="${colorValue.getImage('medium')}" scope="page"/>

							<iscomment>If images couldn't be determined, display a "no image" thumbnail</iscomment>
							<isif condition="${!empty(colorSwatch)}">
								<isset name="swatchUrl" value="${colorSwatch.getURL()}" scope="page"/>
								<isset name="swatchAlt" value="${colorSwatch.alt}" scope="page"/>
								<isset name="swatchTitle" value="${colorSwatch.title}" scope="page"/>
							<iselse/>
								<isset name="swatchUrl" value="${URLUtils.staticURL('/images/noimagesmall.png')}" scope="page"/>
								<isset name="swatchAlt" value="${colorValue.displayValue}" scope="page"/>
								<isset name="swatchTitle" value="${colorValue.displayValue}" scope="page"/>
							</isif>
							<isif condition="${!empty(colorThumbnail)}">
								<isset name="thumbnailUrl" value="${colorThumbnail.getURL()}" scope="page"/>
								<isset name="thumbnailAlt" value="${colorThumbnail.alt}" scope="page"/>
								<isset name="thumbnailTitle" value="${colorThumbnail.title}" scope="page"/>
							<iselse/>
								<isset name="thumbnailUrl" value="${URLUtils.staticURL('/images/noimagesmall.png')}" scope="page"/>
								<isset name="thumbnailAlt" value="${colorValue.displayValue}" scope="page"/>
								<isset name="thumbnailTitle" value="${colorValue.displayValue}" scope="page"/>
							</isif>
							<isif condition="${!empty(selectedColor)}">
								<isset name="preselectCurrentSwatch" value="${colorValue.value == selectedColor.value}" scope="page"/>
							<iselse/>
								<isset name="preselectCurrentSwatch" value="${varloop.first}" scope="page"/>
							</isif>

							<iscomment>build the proper URL and append the search query parameters</iscomment>
							<isset name="swatchproductUrl" value="${Product.variationModel.url('Product-Show', colorVarAttr, colorValue.value)}" scope="page"/>
							<isif condition="${!empty(pdict.ProductSearchResult)}">
								<isset name="swatchproductUrl" value="${pdict.ProductSearchResult.url(swatchproductUrl)}" scope="page"/>
							</isif>

							<iscomment>render a single swatch, the url to the proper product detail page is contained in the href of the swatch link</iscomment>
							<li>
								<a href="${swatchproductUrl}" class="swatch ${(preselectCurrentSwatch) ? 'selected' : ''}" title="${swatchTitle}">
									<img class="swatch-image" src="${swatchUrl}" alt="${swatchAlt}"  data-thumb='{"src":"${thumbnailUrl}","alt":"${thumbnailAlt}","title":"${thumbnailTitle}"}'/>
								</a>
							</li>
						</isloop>
					</ul><!-- .swatch-list -->
				</div><!-- .product-swatches -->
			</isif>
		</isif>

		<iscomment>Compare</iscomment>
		<iscomment>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</iscomment>
		<isif condition="${showcompare}">
			<iscomment>
				Render the compare checkbox, if search result is based on a category context.
				The checkbox is displayed if either the category or one of its parent categories
				has the custom attribute "enableCompare" set to true.
			</iscomment>
			<isscript>var ProductUtils = require('~/cartridge/scripts/product/ProductUtils.js');</isscript>
			<isif condition="${!empty(pdict.CurrentHttpParameterMap.cgid.value) && ProductUtils.isCompareEnabled(pdict.CurrentHttpParameterMap.cgid.value)}">
				<isif condition="${!Product.productSet && !Product.bundle}">
					<isscript>
						// mark the compare checkbox checked if the current product is
						// in the current comparison list for the current category
						importScript( "catalog/libCompareList.ds" );

						var comparison = GetProductCompareList();
						var comparisonProducts = null;
						var checkedStr = '';
						// Set the category
						if (!empty(pdict.ProductSearchResult && !empty(pdict.ProductSearchResult.category))) {
							comparison.setCategory(pdict.ProductSearchResult.category.ID);
						}

						if (comparison) {
							comparisonProducts = comparison.getProducts();
						}
						if (!empty(comparisonProducts)) {
							var pIt = comparisonProducts.iterator();
							var productId = null;
							while (pIt.hasNext()) {
								productId = pIt.next();
								if (productId == Product.ID) {
									checkedStr = 'checked="checked"';
									break;
								}
							}
						}
					</isscript>
					<div class="product-compare label-inline">
						<label for="${'cc-'+Product.UUID}">${Resource.msg('search.compare', 'search', null)} <span class="visually-hidden">${Product.name} ${Product.ID}</span></label>
						<div class="field-wrapper">
							<input type="checkbox" class="compare-check" id="${'cc-'+Product.UUID}" <isprint value="${checkedStr}" encoding="off" />/>
						</div>
					</div>
				</isif>
			</isif>
		</isif>
		<isscript>
				let availability = ProductUtils.getAvailability(Product,1);
		</isscript>
		<iscomment>Add to Cart</iscomment>
		<div class="product-cta">
			<isif condition = "${Product.ID == giftBuilderSKU}">
				<a href="${URLUtils.http('Product-Show', 'pid', Product.ID)}"><button class="btn btn-default btn-sm" tabindex="0"  data-productname="<isprint value="${product.name}"/>" data-pid="<isprint value="${product.ID}"/>">${Resource.msg('global.addtocart', 'locale', null)}</button></a>					
			</isif>	
		</div>
		<isif condition="${!giftItem}">
			<isscript> 
				var comingSoonMsg = (pdict.Product.custom.oosProductStatus.value)?pdict.Product.custom.oosProductStatus.value:"notifyme";
			</isscript>

			<isif condition="${(comingSoonMsg == 'comingsoon')}">
				<a href="${productUrl}" class="btn btn-default btn-sm plp-list">${Resource.msg('global.comingsoon.button', 'locale', null)}</a>
			<iselse/>
				<isif condition="${availability.ats > 0}">
					<form action="${URLUtils.url('Cart-AddProduct')}" method="post" id="${pdict.CurrentForms.product.addtocart.dynamicHtmlName}" class="pdpForm">
						<input type="hidden" class="input-text" name="Quantity" id="Quantity-<isprint value="${Product.ID}" />" size="2" maxlength="3" value="1"/>
						<input type="hidden" name="cartAction" id="cartAction-<isprint value="${Product.ID}" />" value="add" />
						<input type="hidden" name="pid" id="pid" value="${Product.ID}" />
						<input type="hidden" name="productname" id="pid" value="${Product.name}" />
						<input type="hidden" name="page" id="page-<isprint value="${Product.ID}" />" value="bag" />
						<input type="hidden" name="pageInfo" id="pageInfo-<isprint value="${Product.ID}" />" value="addToBag" />
						<div class="product-cta">
							<isscript>
							var Tatcha = require('~/cartridge/scripts/util/Tatcha');
							var disableBtn = false;
							if(!Tatcha.hasCartCategory(Product) && (Product.priceModel.getPrice().valueOrNull === null || Product.priceModel.getPrice().value == 0)) {
								disableBtn = true;
							}
							</isscript>
							<isif condition="${(disableBtn == true)}">
								<a class="btn btn-default btn-sm plp-list-quick-view disabled" href="#">${Resource.msg('global.addtocart', 'locale', null)}</a>
							<iselse/>
								<a class="btn btn-default btn-sm plp-list-quick-view open-qv-modal"  data-toggle="tooltip" data-placement="top" title="Add Product to cart" data-matchbox-addtocart="${Product.ID}" data-url="${productUrl}" href="${productUrl}">${Resource.msg('global.addtocart', 'locale', null)}</a>
							</isif>
						</div>
					</form>		
				<iselse>
					<isset name="productUrl" value="${URLUtils.url('Product-Show', 'pid', Product.ID)}" scope="page" />
					<div class="product-cta">
						<isif condition="${(Product.custom.oosProductStatus.value == 'comingsoon')}">
							<a href="${productUrl}" class="btn btn-default btn-sm plp-list">${Resource.msg('global.comingsoon.button', 'locale', null)}</a>
						<iselse>
							<a href="${productUrl}" class="btn btn-default btn-sm plp-list">${Resource.msg('global.outofstock', 'locale', null)}</a>
						</isif>
					</div>
				</isif>
			</isif>
		<iselse>
			<isif condition="${!(Product.ID == giftBuilderSKU)}">	
				<div class="product-cta-block">							
					<div class="product-cta">
						<a class="btn btn-default btn-sm btn-round " data-url="${productUrl}" href="${productUrl}">${Resource.msg('global.addtocart', 'locale', null)}</a>
					</div>
				</div>
			</isif>				
		</isif>
		
	</div><!--  END: .product-tile -->
</isif>
