/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*-   @input ExampleIn : String This is a sample comment.
*-   @output ExampleOut : Number
*
*/
importPackage( dw.system );
importPackage( dw.net );
importPackage( dw.io );
importPackage( dw.util );
importPackage( dw.catalog );

function execute( args : PipelineDictionary ) : Number
{

     // Create file reader to read csv file
      
        var fileName : String = dw.system.Site.current.preferences.custom.fileName;
        var filePath = File.IMPEX + File.SEPARATOR+"src"+File.SEPARATOR+"catalog"+File.SEPARATOR+fileName;
        var csvReader : dw.io.CSVStreamReader = new CSVStreamReader( new FileReader( new File( filePath ) ) );
        
        var pipeEncoded  : String     = "%7c";
		var tradedMarkEncoded : String = "&#174";
		var aWithTilde : String = "&#195";
		var aWithCircumflex : String = "&#194";
		var ewithAcute : String = "&#233"; //  �
		var eaccent : String = "&#232"; // �
		var degreeSymbol : String = "&#176";
		var ulgerman : String = "&#252"; // �
		var olgerman : String = "&#246";  // �
		var algerman : String = "&#228"; // �
		var augerman : String = "&#196"; // �
		var bgerman : String = "&#223";   // �
     
      //read all the lines
      try
	   {
    	//create file to import
    	
    	//generating the time stamp to be added to the feed new name	
		var calendar : Calendar = new Calendar();
		calendar.timeZone = "GMT";
		var gmtDateString : String = StringUtils.formatCalendar( calendar, "yyyy-MM-dd_HH-mm-ss" );
		
			
		var importFile : File = new File(File.IMPEX + "/src/catalog/TATCHA_CATEGORY_ASSIGNMENTS_"+gmtDateString+".xml");
    	
    	// Create an output stream
        var xsw : XMLStreamWriter = beginFeed(importFile);
        
        //write products to xml file
          try{
		      var line =  csvReader.readNext();
		      
		      while(!empty(line) && !empty(line[0])){
                    
                    var catArray = [];
	        		//get categories
	        		var moisturizers = line[70] + "&moisturizers";
					var cleansers_exfoliators = line[71] + "&cleansers_exfoliators";
					var face_serums_treatments = line[72] + "&face_serums_treatments";
					var masks  = line[73] + "&masks";
					var essence_mist  = line[74] + "&essence_mist";
					var eyecare = line[75]  + "&eyecare";
					var sun_screen = line[76] + "&sun_screen";
					var lip  = line[77] + "&lip";
					var make_up_essentials  = line[78] + "&make_up_essentials";
					var priming_pre_makeup = line[79] + "&priming_pre_makeup";
					var body_care  = line[80] + "&body_care";
					var gifts_sets  = line[81] + "&gifts_sets";
					var travel   = line[82] + "&travel";
					var blotting_papers_tools = line[83] + "&blotting_papers_tools";
					var normal_to_oily   = line[84] + "&normal_to_oily";
					var normal_to_dry = line[85] + "&normal_to_dry";
					var dry   = line[86] + "&dry";
					var sensitive = line[87] + "&sensitive";
					var shop_all  = line[88] + "&shop_all";
					var whatnew = line[89] + "&new";
					var best_sellers = line[90] + "&best_sellers";
					
					catArray = [moisturizers, cleansers_exfoliators,face_serums_treatments, masks,essence_mist,eyecare,sun_screen,lip,make_up_essentials,priming_pre_makeup,body_care,gifts_sets,travel,blotting_papers_tools,normal_to_oily,normal_to_dry,dry,sensitive,shop_all,best_sellers];
					
	        		var catArrayValues = [];
	        		for(var i = 0; i < catArray.length; i++) {
	        			    
	        			    var catVal = catArray[i].split("&");
	        			    
							if (!empty(catVal) && catVal[0]!="" &&catVal.length > 1 ){
								catArrayValues.push(catVal[1]);
							 }
					  }
	        		//Ende Categories
	        		
	        		for(var i = 0; i <  catArrayValues.length; i++) {
					    startCategoryXML(xsw,catArrayValues[i],line[0]);  
					    //writePrimaryCategoryValues(xsw);       
			            closeCategoryXML(xsw); 
	        		}
		            //Get Recommendations
		          /*  var prodID = "";
		            var recommendedPID = "";
		            var type = "4";
		            
	                var prodRecs_1 = line[106];
	                var prodRecs_2 = line[108];
	                var prodRecs_3 = line[110];
	                var prodRecs_4 = line[112];
		             
		             var prodRecsList = [prodRecs_1,prodRecs_2,prodRecs_3,prodRecs_4];
		             var prodList = [];
		             for(var i = 0; i < prodRecsList.length; i++) {
		             	var recProd =  prodRecsList[i];
		             	if(!empty(recProd && recProd !="0")){
		             		prodList.push(recProd);
		             	}
		             }
		             if(!empty(prodList) && prodList.length > 0 ) {
			             for(var i = 0; i < prodList.length; i++) {
			             	var recTarget =  prodList[i];
				            startRecommendationXML(xsw,line[0], recTarget, type); 
				            closeRecommendationXML(xsw);
			              }
		             }*/

		                                  
	      	        line =  csvReader.readNext();
		      }
      
      }catch(e){
      	 csvReader.close();
      	 Logger.error(" Tatcha Catalog Conversion "+e);
      	 return PIPELET_ERROR;
      }
      csvReader.close();
         
        // Flush & close the stream
        closeFeed(xsw);
	}
	catch(ex)
	{
		Logger.error("ConvertFile ERROR: " + ex);
		return PIPELET_ERROR;
	}
       
    
      return PIPELET_NEXT;
   
}

function beginFeed(file : File) : XMLStreamWriter {
    var fw : FileWriter = new FileWriter(file, "UTF-8", false);
    var xsw : XMLStreamWriter = new XMLIndentingStreamWriter(fw);
    
   	xsw.writeStartDocument("UTF-8", "1.0");
	
	xsw.writeStartElement( "catalog" );
	xsw.writeDefaultNamespace("http://www.demandware.com/xml/impex/catalog/2006-10-31");
	xsw.writeAttribute( "catalog-id", "storefront_catalog_tatcha_us");
	
    return xsw;
}
function closeFeed(xsw : XMLStreamWriter) {
	// close root element and document
    xsw.writeEndElement();			//</catalog>
    xsw.writeEndDocument();
   
    xsw.flush();
    xsw.close();
}




function startCategoryXML(xsw : XMLStreamWriter,catID : String, prodID : String) {
	xsw.writeStartElement( "category-assignment" );  // assignment
	xsw.writeAttribute( "category-id" , catID );
	xsw.writeAttribute( "product-id" , prodID );
	
	
}

function closeCategoryXML(xsw : XMLStreamWriter) {	
	
	xsw.writeEndElement();		//</end category assignment>
}
function writePrimaryCategoryValues(xsw : XMLStreamWriter) {
	 var elemValue = true;

	xsw.writeStartElement("primary-flag");  // 
	  xsw.writeCharacters(elemValue); 
    xsw.writeEndElement();
}
// Write recommendation: <recommendation source-id="PC-OIL" source-type="product" target-id="ESSENCE" type="4"/>
function startRecommendationXML(xsw : XMLStreamWriter, prodID, recommendedPID, type) {
	xsw.writeStartElement( "recommendation" );  // assignment
	xsw.writeAttribute("source-id" , prodID );
	xsw.writeAttribute( "source-type" , "product" );
	xsw.writeAttribute( "target-id" , recommendedPID );
	xsw.writeAttribute( "target-id" ,type );
	
	
}

function closeRecommendationXML(xsw : XMLStreamWriter) {	
	
	xsw.writeEndElement();		//</end category assignment>
}
