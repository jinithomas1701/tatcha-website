/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*-   @input ExampleIn : String This is a sample comment.
*-   @output ExampleOut : Number
*
*/
importPackage( dw.system );
importPackage( dw.net );
importPackage( dw.io );
importPackage( dw.util );
importPackage( dw.catalog );

function execute( args : PipelineDictionary ) : Number
{

     // Create file reader to read csv file
      
      var fileName : String = dw.system.Site.current.preferences.custom.fileName;
      var filePath = File.IMPEX + File.SEPARATOR+"src"+File.SEPARATOR+"catalog"+File.SEPARATOR+fileName;
        var csvReader : dw.io.CSVStreamReader = new CSVStreamReader( new FileReader( new File( filePath ) ) );
        
        var pipeEncoded  : String     = "%7c";
		var tradedMarkEncoded : String = "&#174";
		var aWithTilde : String = "&#195";
		var aWithCircumflex : String = "&#194";
		var ewithAcute : String = "&#233"; //  �
		var eaccent : String = "&#232"; // �
		var degreeSymbol : String = "&#176";
		var ulgerman : String = "&#252"; // �
		var olgerman : String = "&#246";  // �
		var algerman : String = "&#228"; // �
		var augerman : String = "&#196"; // �
		var bgerman : String = "&#223";   // �
     
      //read all the lines
      try
	   {
    	//create file to import
    	
    	//generating the time stamp to be added to the feed new name	
		var calendar : Calendar = new Calendar();
		calendar.timeZone = "GMT";
		var gmtDateString : String = StringUtils.formatCalendar( calendar, "yyyy-MM-dd_HH-mm-ss" );
		
			
		var importFile : File = new File(File.IMPEX + "/src/catalog/TATCHA_PRODUCT_RECOMMENDATION_"+gmtDateString+".xml");
    	
    	// Create an output stream
        var xsw : XMLStreamWriter = beginFeed(importFile);
        
        //write products to xml file
          try{
		      var line =  csvReader.readNext();
		      
		      while(!empty(line) && !empty(line[0])){
                    
                   
		            //Get Recommendations
		         
		            var type = "4";
		            var typeYMAL = "5";
		           
		            var prodRecsYMAL_1 = line[48];
	                var prodRecsYMAL_2 = line[49];
	                var prodRecsYMAL_3 = line[50];
	                var prodRecsYMAL_4 = line[51]; 
	               
	                var prodRecs_1 = line[107];
	                var prodRecs_2 = line[109];
	                var prodRecs_3 = line[111];
	                var prodRecs_4 = line[113];
			             
		             var prodRecsList = [prodRecs_1,prodRecs_2,prodRecs_3,prodRecs_4];
		             var prodList = [];
		             for(var i = 0; i < prodRecsList.length; i++) {
		             	var recProd =  prodRecsList[i];
		             	if(!empty(recProd) && recProd !="0"){
		             		prodList.push(recProd);
		             	}
		             }
		             if(!empty(prodList) && prodList.length > 0 ) {
			             for(var i = 0; i < prodList.length; i++) {
			             	var recTarget =  prodList[i];
				            startRecommendationXML(xsw,line[0], recTarget, type); 
				            closeRecommendationXML(xsw);
			              }
		             }
		             
		             
		              var prodRecsListYMAL = [prodRecsYMAL_1,prodRecsYMAL_2,prodRecsYMAL_3,prodRecsYMAL_4];
		             var prodListYMAL = [];
		             for(var i = 0; i < prodRecsListYMAL.length; i++) {
		             	var recProdYMAL =  prodRecsListYMAL[i];
		             	if(!empty(recProdYMAL) && recProdYMAL !="0"){
		             		prodListYMAL.push(recProdYMAL);
		             	}
		             }
		             if(!empty(prodListYMAL) && prodListYMAL.length > 0 ) {
			             for(var i = 0; i < prodListYMAL.length; i++) {
			             	var recTargetYMAL =  prodListYMAL[i];
				            startRecommendationXML(xsw,line[0], recTargetYMAL, typeYMAL); 
				            closeRecommendationXML(xsw);
			              }
		             }

		                                  
	      	        line =  csvReader.readNext();
		      }
      
      }catch(e){
      	 csvReader.close();
      	 Logger.error(" Tatcha Catalog Conversion "+e);
      	 return PIPELET_ERROR;
      }
      csvReader.close();
         
        // Flush & close the stream
        closeFeed(xsw);
	}
	catch(ex)
	{
		Logger.error("ConvertFile ERROR: " + ex);
		return PIPELET_ERROR;
	}
       
    
      return PIPELET_NEXT;
   
}

function beginFeed(file : File) : XMLStreamWriter {
    var fw : FileWriter = new FileWriter(file, "UTF-8", false);
    var xsw : XMLStreamWriter = new XMLIndentingStreamWriter(fw);
    
   	xsw.writeStartDocument("UTF-8", "1.0");
	
	xsw.writeStartElement( "catalog" );
	xsw.writeDefaultNamespace("http://www.demandware.com/xml/impex/catalog/2006-10-31");
	xsw.writeAttribute( "catalog-id", "storefront_catalog_tatcha_us");
	
    return xsw;
}
function closeFeed(xsw : XMLStreamWriter) {
	// close root element and document
    xsw.writeEndElement();			//</catalog>
    xsw.writeEndDocument();
   
    xsw.flush();
    xsw.close();
}





// Write recommendation: <recommendation source-id="PC-OIL" source-type="product" target-id="ESSENCE" type="4"/>
function startRecommendationXML(xsw : XMLStreamWriter, prodID, recommendedPID, type) {
	xsw.writeStartElement( "recommendation" );  // assignment
	xsw.writeAttribute("source-id" , prodID );
	xsw.writeAttribute( "source-type" , "product" );
	xsw.writeAttribute( "target-id" , recommendedPID );
	xsw.writeAttribute( "type" ,type );
	
	
}

function closeRecommendationXML(xsw : XMLStreamWriter) {	
	
	xsw.writeEndElement();		//</end category assignment>
}
